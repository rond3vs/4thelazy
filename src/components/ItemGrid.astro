---
// src/components/ItemGrid.astro
import { getCollection, type CollectionEntry } from 'astro:content';
import ItemCard from './ItemCard.astro';

// Props (left in place but NOT used for server-side filtering anymore)
interface Props {
  tag?: string;
  limit?: number;
  contentType?: 'all' | 'blog' | 'product' | 'app' | 'website';
  debug?: boolean;
  includeAllDates?: boolean;
}

// Unified resource shape used by the grid
interface Resource {
  type: 'blog' | 'product' | 'app' | 'website';
  data:
    | CollectionEntry<'blog'>
    | CollectionEntry<'products'>
    | CollectionEntry<'apps'>
    | CollectionEntry<'websites'>;
  slug: string;
  title: string;
  description: string;
  image?: string;
  pubDate: Date;
  updatedDate?: Date;
  isSponsored?: boolean;

  // Common/optional
  tags?: string[];
  categories?: string[];
  price?: number;
  currency?: string;
  rating?: number;

  // Product-specific
  affiliateLink?: string;

  // App-specific
  platform?: string[];
  developer?: string;
  version?: string;
  isFreemium?: boolean;
  hasSubscription?: boolean;
  downloadLink?: string;

  // Website-specific
  url?: string;
  technologies?: string[];
  services?: string[];
  hasFreeTier?: boolean;
  hasPaidPlan?: boolean;
  monthlyPrice?: number;
}

const {
  tag,            // kept for debug panel only
  limit,          // kept for debug panel only
  contentType = 'all', // kept for debug panel only
  debug = false,
  includeAllDates = true,
} = Astro.props as Props;

const fmt = (amount?: number, currency = 'USD') =>
  typeof amount === 'number'
    ? new Intl.NumberFormat('en-US', { style: 'currency', currency }).format(amount)
    : undefined;

// Load collections (skip drafts)
const allBlogPosts = await getCollection('blog', ({ data }) => !data.draft);
const allProducts  = await getCollection('products', ({ data }) => !data.draft);
const allApps      = await getCollection('apps', ({ data }) => !data.draft);
const allWebsites  = await getCollection('websites', ({ data }) => !data.draft);

// Counts (debug)
const blogCount = allBlogPosts.length;
const productCount = allProducts.length;
const appCount = allApps.length;
const websiteCount = allWebsites.length;

if (debug) {
  console.log('=== DEBUG: COLLECTION COUNTS ===');
  console.log({ blogCount, productCount, appCount, websiteCount });
}

// Sort copies by date desc
const sortedBlogPosts = [...allBlogPosts].sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
const sortedProducts  = [...allProducts].sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
const sortedApps      = [...allApps].sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
const sortedWebsites  = [...allWebsites].sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Build unified list
let allResources: Resource[] = [];

// Blog
allResources.push(
  ...sortedBlogPosts.map((post) => ({
    type: 'blog' as const,
    data: post,
    slug: post.slug,
    title: post.data.title,
    description: post.data.description || '',
    image: undefined,
    pubDate: post.data.pubDate,
    updatedDate: post.data.updatedDate,
    isSponsored: post.data.isSponsored || false,
    tags: post.data.tags || [],
  }))
);

// Products
allResources.push(
  ...sortedProducts.map((product) => ({
    type: 'product' as const,
    data: product,
    slug: product.slug,
    title: product.data.title,
    description: product.data.description || '',
    image: undefined,
    pubDate: product.data.pubDate || new Date(),
    updatedDate: product.data.updatedDate,
    affiliateLink: product.data.affiliateLink || '',
    tags: product.data.tags || [],
    price: product.data.price,
    currency: product.data.currency || 'USD',
    rating: product.data.rating,
  }))
);

// Apps
allResources.push(
  ...sortedApps.map((app) => ({
    type: 'app' as const,
    data: app,
    slug: app.slug,
    title: app.data.title,
    description: app.data.description || '',
    image: undefined,
    pubDate: app.data.pubDate || new Date(),
    updatedDate: app.data.updatedDate,
    isSponsored: app.data.isSponsored || false,
    platform: app.data.platform || [],
    downloadLink: app.data.downloadLink || '',
    tags: app.data.tags || [],
    price: app.data.price,
    currency: app.data.currency || 'USD',
    rating: app.data.rating,
    developer: app.data.developer,
    version: app.data.version,
    isFreemium: app.data.isFreemium,
    hasSubscription: app.data.hasSubscription,
  }))
);

// Websites
allResources.push(
  ...sortedWebsites.map((website) => ({
    type: 'website' as const,
    data: website,
    slug: website.slug,
    title: website.data.title,
    description: website.data.description || '',
    image: undefined,
    pubDate: website.data.pubDate || new Date(),
    updatedDate: website.data.updatedDate,
    isSponsored: website.data.isSponsored || false,
    url: website.data.url || '',
    tags: website.data.tags || [],
    currency: website.data.currency || 'USD',
    rating: website.data.rating,
    technologies: website.data.technologies,
    services: website.data.services,
    hasFreeTier: website.data.hasFreeTier,
    hasPaidPlan: website.data.hasPaidPlan,
    monthlyPrice: website.data.monthlyPrice,
  }))
);

// ‚úÖ Sort combined by date (NO server-side filtering or slicing)
let filteredResources = allResources.sort(
  (a, b) => b.pubDate.valueOf() - a.pubDate.valueOf()
);

// Tag cloud
const allTagsSet = new Set<string>();
allResources.forEach((r) => {
  r.tags?.forEach((t) => allTagsSet.add(t));
  r.categories?.forEach((c) => allTagsSet.add(c));
});
const allTags = Array.from(allTagsSet).sort();

// Counts for debug
const categoryCounts = {
  all: allResources.length,
  blog: allResources.filter((r) => r.type === 'blog').length,
  product: allResources.filter((r) => r.type === 'product').length,
  website: allResources.filter((r) => r.type === 'website').length,
  app: allResources.filter((r) => r.type === 'app').length,
};

const totalResources = filteredResources.length;
---

<section class="browse-container" id="browse-section">
  <div class="container">
    <h2 class="section-title">Look around. Stay Awhile.</h2>
    <p class="section-description">
      Search through the collection of blog posts, products, apps, and websites to find something that may or may not help you ü§∑‚Äç‚ôÇÔ∏è
    </p>

    {debug && (
      <div class="debug-panel">
        <h3>Debug Information</h3>
        <ul>
          <li>Blog collection: {blogCount} items</li>
          <li>Products: {productCount} items</li>
          <li>Apps: {appCount} items</li>
          <li>Websites: {websiteCount} items</li>
          <li>Total resources loaded: {totalResources}</li>
          <li>Blog Posts: {categoryCounts.blog}</li>
          <li>Products: {categoryCounts.product}</li>
          <li>Websites: {categoryCounts.website}</li>
          <li>Apps: {categoryCounts.app}</li>
          <li>Current filter prop (unused client-side): {contentType}</li>
          <li>Tag prop (unused client-side): {tag || 'none'}</li>
          <li>Limit prop (unused client-side): {typeof limit === 'number' ? limit : 'none'}</li>
          <li>Include All Dates: {includeAllDates ? 'Yes' : 'No'}</li>
        </ul>
      </div>
    )}

    <div class="filter-container">
      <div class="search-box">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M11 19C15.4183 19 19 15.4183 19 11C19 6.58172 15.4183 3 11 3C6.58172 3 3 6.58172 3 11C3 15.4183 6.58172 19 11 19Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          <path d="M21 21L16.65 16.65" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        <input type="text" id="resource-search" placeholder="Search..." />
      </div>

      <!-- Content type filter tabs -->
      <div class="content-type-tabs" role="tablist">
        <button class="content-type-tab active" data-type="all" role="tab" aria-pressed="true">All ({categoryCounts.all})</button>
        <button class="content-type-tab" data-type="blog" role="tab" aria-pressed="false">Blog Posts ({categoryCounts.blog})</button>
        <button class="content-type-tab" data-type="product" role="tab" aria-pressed="false">Products ({categoryCounts.product})</button>
        <button class="content-type-tab" data-type="website" role="tab" aria-pressed="false">Websites ({categoryCounts.website})</button>
        <button class="content-type-tab" data-type="app" role="tab" aria-pressed="false">Apps ({categoryCounts.app})</button>

        <button class="content-type-tab shuffle-button" data-action="shuffle" role="button" aria-label="Shuffle results">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="margin-right: 4px;">
            <path d="M16 3H21V8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M4 20L21 3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M21 16V21H16" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M15 15L21 21" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M4 4L9 9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
          Shuffle
        </button>
      </div>

      <!-- Tags filter -->
      <div class="tags-filter">
        <h3 class="filter-title">Filter by tags</h3>
        <div class="filter-tabs" id="tag-filters" role="tablist">
          <button class="filter-tab active" data-tag="all" role="tab" aria-pressed="true">All</button>
          {allTags.map((tagName) => (
            <button class="filter-tab" data-tag={tagName} role="tab" aria-pressed="false">{tagName}</button>
          ))}
        </div>
      </div>
    </div>

    <!-- Resource cards grid -->
    <div class="resources-grid" id="resources-container">
      {filteredResources.length > 0 ? (
        filteredResources.map((resource) => {
          const baseProps = {
            title: resource.title,
            link: `/${resource.type}/${resource.slug}`,
            description: resource.description,
            contentType: resource.type,
            isSponsored: resource.isSponsored ?? false,
            pubDate: resource.pubDate.toISOString(),
            updatedDate: resource.updatedDate?.toISOString(),
            image: resource.image,
            tags: resource.tags || [],
            // Add data attributes for filtering
            'data-content-type': resource.type,
            'data-tags': (resource.tags || []).join(','),
            'data-title': resource.title,
            'data-description': resource.description,
          };

          if (resource.type === 'blog') {
            const props = { ...baseProps, type: 'blog' };
            return <ItemCard {...props} />;
          }

          if (resource.type === 'product') {
            const props = {
              ...baseProps,
              affiliateLink: resource.affiliateLink || '',
              price: fmt(resource.price, resource.currency || 'USD'),
              currency: resource.currency || 'USD',
              rating: typeof resource.rating === 'number' ? resource.rating : undefined,
              categories: resource.categories || [],
            };
            return <ItemCard {...props} />;
          }

          if (resource.type === 'app') {
            const props = {
              ...baseProps,
              platform: resource.platform || [],
              downloadLink: resource.downloadLink || '',
              price: fmt(resource.price, resource.currency || 'USD'),
              currency: resource.currency || 'USD',
              rating: typeof resource.rating === 'number' ? resource.rating : undefined,
            };
            return <ItemCard {...props} />;
          }

          const props = {
            ...baseProps,
            url: resource.url || '',
            monthlyPrice:
              typeof resource.monthlyPrice === 'number'
                ? fmt(resource.monthlyPrice, resource.currency || 'USD')
                : undefined,
            currency: resource.currency || 'USD',
            rating: typeof resource.rating === 'number' ? resource.rating : undefined,
          };
          return <ItemCard {...props} />;
        })
      ) : (
        <div class="no-resources">
          <p>No resources found matching the current filters.</p>
        </div>
      )}
    </div>

    <!-- Pagination -->
    <div id="pagination-container" class="pagination-container"></div>

    {debug && (productCount === 0 || appCount === 0 || websiteCount === 0) && (
      <div class="debug-help">
        <h3>Troubleshooting: Missing Collections</h3>
        <ul>
          {productCount === 0 && <li>Make sure you have created product files in <code>src/content/products/</code></li>}
          {appCount === 0 && <li>Make sure you have created app files in <code>src/content/apps/</code></li>}
          {websiteCount === 0 && <li>Make sure you have created website files in <code>src/content/websites/</code></li>}
          <li>Ensure your content schema in <code>src/content/config.ts</code> has all collections defined</li>
          <li>Check that your content files have the correct frontmatter structure</li>
        </ul>
      </div>
    )}
  </div>
</section>

<style>
  .section-title { margin-bottom: var(--spacing-lg); text-align: center; }
  .section-description { text-align: center; margin: 0 auto var(--spacing-lg); max-width: 700px; }
  .container { position: relative; padding-top: 3rem; }
  .filter-container { margin-bottom: var(--spacing-lg); }

  .search-box { position: relative; max-width: 300px; margin: 0 auto var(--spacing-md); }
  .search-box svg { position: absolute; left: 10px; top: 50%; transform: translateY(-50%); color: var(--color-text-light); }
  .search-box input { padding: 8px 12px 8px 40px; border-radius: var(--radius-md); width: 100%; border: 1px solid var(--color-border); }

  .content-type-tabs, .filter-tabs {
    display: flex; flex-wrap: wrap; justify-content: center; gap: var(--spacing-xs); margin-bottom: var(--spacing-md);
  }
  .content-type-tab, .filter-tab {
    padding: var(--spacing-sm) var(--spacing-md); border-radius: var(--radius-md); border: 1px solid var(--color-border);
    font-family: 'Roboto Mono', monospace; font-size: 0.9rem; cursor: pointer; transition: all 0.2s;
    background-color: var(--color-background, #fff); color: var(--color-text-light, #666);
  }
  .content-type-tab.active, .filter-tab.active { 
    background-color: var(--color-primary, #007acc); 
    color: var(--color-white, #fff); 
    font-weight: 600; 
  }
  .content-type-tab:hover:not(.active), .filter-tab:hover:not(.active) { 
    background-color: var(--color-white, #fff); 
    color: var(--color-primary, #007acc); 
  }

  .tags-filter { margin-top: var(--spacing-md); }
  .filter-title { text-align: center; font-size: 1.1rem; margin-bottom: var(--spacing-sm); color: var(--color-text-light, #666); }
  .filter-tabs { 
    display: flex; flex-wrap: wrap; justify-content: center; gap: var(--spacing-xs); 
    margin-bottom: var(--spacing-md); max-width: 90%; margin-left: auto; margin-right: auto; 
  }

  .resources-grid {
    display: grid; grid-template-columns: repeat(3, 1fr); gap: var(--spacing-sm, 1rem);
    max-width: 100%; margin: 0 auto; width: 100%; min-width: 200px;
  }
  .no-resources { 
    grid-column: 1 / -1; text-align: center; padding: var(--spacing-xl, 2rem); 
    border-radius: var(--radius-lg, 8px); 
  }

  .debug-panel { 
    background-color: #f0f8ff; border-radius: var(--radius-md, 6px); 
    padding: var(--spacing-md, 1rem); margin-bottom: var(--spacing-lg, 1.5rem); 
    border: 1px solid #b0d8ff; 
  }
  .debug-help { 
    margin-top: var(--spacing-lg, 1.5rem); padding: var(--spacing-md, 1rem); 
    background-color: #fff8f0; border-radius: var(--radius-md, 6px); 
    border: 1px solid #ffe0b0; 
  }

  @media (max-width: 992px) { .resources-grid { grid-template-columns: repeat(2, 1fr); } }
  @media (max-width: 640px) {
    .resources-grid { grid-template-columns: 1fr; }
    .content-type-tabs, .filter-tabs { 
      overflow-x: auto; padding-bottom: var(--spacing-sm, 0.5rem); 
      margin-bottom: var(--spacing-md, 1rem); -webkit-overflow-scrolling: touch; 
      scrollbar-width: none; 
    }
    .content-type-tabs::-webkit-scrollbar, .filter-tabs::-webkit-scrollbar { display: none; }
    .content-type-tab, .filter-tab { white-space: nowrap; }
  }

  .shuffle-button { 
    display: flex; align-items: center; justify-content: center; 
    background-color: var(--color-white, #fff); color: var(--color-text, #333); 
    border: 1px dashed var(--color-border, #ddd); 
  }
  .shuffle-button:hover { 
    background-color: var(--color-background-light, #f9f9f9); 
    transform: rotate(5deg); 
  }
  .shuffle-button svg { transition: transform 0.3s ease; }
  .shuffle-button:hover svg { transform: rotate(180deg); }

  .pagination-container { 
    display: flex; justify-content: center; align-items: center; 
    margin-top: var(--spacing-lg, 1.5rem); gap: var(--spacing-md, 1rem); 
  }
  .pagination-button { 
    padding: var(--spacing-sm, 0.5rem) var(--spacing-md, 1rem); 
    border-radius: var(--radius-md, 6px); border: 1px solid var(--color-border, #ddd); 
    background-color: var(--color-white, #fff); cursor: pointer; transition: all 0.2s; 
    display: flex; align-items: center; gap: var(--spacing-xs, 0.25rem); 
  }
  .pagination-button:hover:not(:disabled) { 
    background-color: var(--color-primary-light, #e6f3ff); 
    color: var(--color-white, #fff); 
  }
  .pagination-button:disabled { opacity: 0.5; cursor: not-allowed; }
  .page-indicator { 
    font-size: 0.9rem; color: var(--color-text-light, #666); 
    padding: var(--spacing-sm, 0.5rem); 
  }
  @media (max-width: 640px) { 
    .pagination-container { flex-direction: column; gap: var(--spacing-sm, 0.5rem); } 
  }
</style>

<script>
(function() {
  'use strict';
  
  // Check if already initialized
  if ((window as any).filtersInitialized) {
    return;
  }
  (window as any).filtersInitialized = true;

  function initFilters(): void {
    const root = document.getElementById('browse-section');
    if (!root) {
      console.warn('Browse section not found');
      return;
    }

    const contentTypeTabs = root.querySelectorAll('.content-type-tab:not(.shuffle-button)');
    const filterTabs = root.querySelectorAll('.filter-tab');
    const resourceCards = root.querySelectorAll('[data-content-type]');
    const searchInput = root.querySelector('#resource-search') as HTMLInputElement | null;
    const shuffleButton = root.querySelector('.shuffle-button');
    const resourcesContainer = root.querySelector('#resources-container') as HTMLElement | null;
    const paginationContainer = root.querySelector('#pagination-container') as HTMLElement | null;

    const postsPerPage = 6;
    let currentPage = 1;
    let filteredCards: Element[] = [];
    let activeContentType = 'all';
    let activeTag = 'all';

    console.log('Filter initialization:', {
      contentTypeTabs: contentTypeTabs.length,
      filterTabs: filterTabs.length,
      resourceCards: resourceCards.length,
      searchInput: !!searchInput,
      shuffleButton: !!shuffleButton
    });

    function sanitize(str: any): string {
      if (typeof str !== 'string') return '';
      return str.replace(/<[^>]*>/g, '').trim().toLowerCase();
    }

    function isValidContentType(type: any): type is string {
      return ['all', 'blog', 'product', 'website', 'app'].includes(type);
    }

    function showNoResults(show: boolean): void {
      if (!resourcesContainer) return;
      
      let noResultsEl = document.getElementById('no-results-message');
      if (!noResultsEl) {
        noResultsEl = document.createElement('div');
        noResultsEl.id = 'no-results-message';
        noResultsEl.className = 'no-resources';
        noResultsEl.innerHTML = '<p>No resources found matching the current filters.</p>';
        const parent = resourcesContainer.parentNode;
        if (parent) {
          parent.insertBefore(noResultsEl, resourcesContainer.nextSibling);
        }
      }
      
      noResultsEl.style.display = show ? 'block' : 'none';
      if (resourcesContainer) {
        resourcesContainer.style.display = show ? 'none' : '';
      }
    }

    function filterResources(): void {
      const searchTerm = sanitize(searchInput ? searchInput.value : '');
      filteredCards = [];

      console.log('Filtering with:', { activeContentType, activeTag, searchTerm });

      Array.from(resourceCards).forEach((card, index) => {
        const cardElement = card as HTMLElement;
        const cardType = card.getAttribute('data-content-type');
        const cardTags = card.getAttribute('data-tags') || '';
        const cardTitle = sanitize(card.getAttribute('data-title') || '');
        const cardDescription = sanitize(card.getAttribute('data-description') || '');

        const tagsArray = cardTags.toLowerCase().split(',').map(t => t.trim()).filter(t => t);

        const typeMatch = activeContentType === 'all' || cardType === activeContentType;
        const tagMatch = activeTag === 'all' || tagsArray.includes(activeTag.toLowerCase());
        const searchMatch = !searchTerm || 
          cardTitle.includes(searchTerm) || 
          cardDescription.includes(searchTerm) ||
          tagsArray.some(tag => tag.includes(searchTerm));

        if (typeMatch && tagMatch && searchMatch) {
          filteredCards.push(card);
          cardElement.style.display = '';
        } else {
          cardElement.style.display = 'none';
        }

        if (index < 3) {
          console.log(`Card ${index}:`, {
            type: cardType,
            title: cardTitle.substring(0, 30),
            tags: tagsArray,
            matches: { typeMatch, tagMatch, searchMatch },
            visible: typeMatch && tagMatch && searchMatch
          });
        }
      });

      console.log(`Filtered: ${filteredCards.length}/${resourceCards.length} cards`);
      updatePageDisplay();
    }

    function createPagination(totalItems: number): void {
      if (!paginationContainer) return;
      
      paginationContainer.innerHTML = '';
      const totalPages = Math.ceil(totalItems / postsPerPage);
      
      if (totalPages <= 1) {
        paginationContainer.style.display = 'none';
        return;
      }
      
      paginationContainer.style.display = 'flex';

      const prevButton = document.createElement('button');
      prevButton.className = 'pagination-button';
      prevButton.textContent = '‚Üê Previous';
      prevButton.disabled = currentPage === 1;
      prevButton.addEventListener('click', () => {
        if (currentPage > 1) {
          currentPage--;
          updatePageDisplay();
        }
      });

      const nextButton = document.createElement('button');
      nextButton.className = 'pagination-button';
      nextButton.textContent = 'Next ‚Üí';
      nextButton.disabled = currentPage >= totalPages;
      nextButton.addEventListener('click', () => {
        if (currentPage < totalPages) {
          currentPage++;
          updatePageDisplay();
        }
      });

      const pageInfo = document.createElement('span');
      pageInfo.className = 'page-indicator';
      pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;

      paginationContainer.appendChild(prevButton);
      paginationContainer.appendChild(pageInfo);
      paginationContainer.appendChild(nextButton);
    }

    function updatePageDisplay(): void {
      filteredCards.forEach(card => {
        const cardElement = card as HTMLElement;
        cardElement.style.display = 'none';
      });
      
      const start = (currentPage - 1) * postsPerPage;
      const end = Math.min(start + postsPerPage, filteredCards.length);
      
      for (let i = start; i < end; i++) {
        if (filteredCards[i]) {
          const cardElement = filteredCards[i] as HTMLElement;
          cardElement.style.display = '';
        }
      }
      
      showNoResults(filteredCards.length === 0);
      createPagination(filteredCards.length);
      
      console.log(`Page ${currentPage}: showing ${end - start} of ${filteredCards.length} cards`);
    }

    function shuffleArray(array: Element[]): Element[] {
      const shuffled = [...array];
      for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
      }
      return shuffled;
    }

    function shuffleCards(): void {
      if (filteredCards.length <= 1 || !resourcesContainer) return;
      
      const shuffled = shuffleArray(filteredCards);
      shuffled.forEach(card => resourcesContainer.appendChild(card));
      filteredCards = shuffled;
      currentPage = 1;
      updatePageDisplay();
    }

    contentTypeTabs.forEach(tab => {
      tab.addEventListener('click', (e) => {
        e.preventDefault();
        const newType = tab.getAttribute('data-type') || 'all';
        
        if (!isValidContentType(newType)) return;
        
        contentTypeTabs.forEach(t => {
          t.classList.remove('active');
          t.setAttribute('aria-pressed', 'false');
        });
        tab.classList.add('active');
        tab.setAttribute('aria-pressed', 'true');
        
        activeContentType = newType;
        currentPage = 1;
        
        console.log('Content type changed to:', activeContentType);
        filterResources();
      });
    });

    filterTabs.forEach(tab => {
      tab.addEventListener('click', (e) => {
        e.preventDefault();
        const newTag = tab.getAttribute('data-tag') || 'all';
        
        filterTabs.forEach(t => {
          t.classList.remove('active');
          t.setAttribute('aria-pressed', 'false');
        });
        tab.classList.add('active');
        tab.setAttribute('aria-pressed', 'true');
        
        activeTag = newTag;
        currentPage = 1;
        
        console.log('Tag changed to:', activeTag);
        filterResources();
      });
    });

    if (searchInput) {
      let searchTimeout: ReturnType<typeof setTimeout>;
      const handleSearch = () => {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          currentPage = 1;
          filterResources();
        }, 300);
      };
      
      searchInput.addEventListener('input', handleSearch);
      searchInput.addEventListener('keyup', handleSearch);
    }

    if (shuffleButton) {
      shuffleButton.addEventListener('click', (e) => {
        e.preventDefault();
        console.log('Shuffling cards');
        shuffleCards();
      });
    }

    console.log('Running initial filter...');
    filterResources();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initFilters);
  } else {
    initFilters();
  }

  document.addEventListener('astro:page-load', () => {
    (window as any).filtersInitialized = false;
    initFilters();
  });

})();
</script>
