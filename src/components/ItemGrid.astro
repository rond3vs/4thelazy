---
// src/components/ItemGrid.astro
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import ItemCard from './ItemCard.astro';

// Extended props to support more flexible filtering
interface Props {
  tag?: string;
  limit?: number;
  contentType?: string; // Allow any content type as a string
  debug?: boolean; // Enable debug mode
  includeAllDates?: boolean; // Option to include all dates or not
}

// Enhanced resource interface to support all collection types
interface Resource {
  type: 'blog' | 'product' | 'app' | 'website';
  data: CollectionEntry<'blog'> | CollectionEntry<'products'> | CollectionEntry<'apps'> | CollectionEntry<'websites'>;
  slug: string;
  title: string;
  description: string;
  image: string;
  pubDate: Date;
  updatedDate?: Date;
  isSponsored: boolean;
  
  // Collection-specific fields
  tags?: string[];            // For blog
  categories?: string[];      // For products, apps, websites
  price?: number;             // For products, apps
  currency?: string;          // For products, apps, websites
  rating?: number;            // For products, apps, websites
  affiliateLink?: string;     // For products
  draft?: boolean;            // For blog
  
  // App-specific fields
  platform?: string[];
  developer?: string;
  version?: string;
  isFreemium?: boolean;
  hasSubscription?: boolean;
  downloadLink?: string;
  
  // Website-specific fields
  url?: string;
  technologies?: string[];
  services?: string[];
  hasFreeTier?: boolean;
  hasPaidPlan?: boolean;
  monthlyPrice?: number;
}

const { 
  tag, 
  limit, 
  contentType = 'all', 
  debug = false,
  includeAllDates = true
} = Astro.props;

// Get all collections and filter out drafts (assuming missing pubDate means a draft)
const allBlogPosts = await getCollection('blog', ({ data }) => !data.draft);
const allProducts = await getCollection('products', ({ data }) => !data.draft);
const allApps = await getCollection('apps', ({ data }) => !data.draft);
const allWebsites = await getCollection('websites', ({ data }) => !data.draft);

// Collection counts for debugging
const blogCount = allBlogPosts.length;
const productCount = allProducts.length;
const appCount = allApps.length;
const websiteCount = allWebsites.length;

// Debug log
if (debug) {
  console.log("=== DEBUG: COLLECTION COUNTS ===");
  console.log(`Blog posts: ${blogCount}`);
  console.log(`Products: ${productCount}`);
  console.log(`Apps: ${appCount}`);
  console.log(`Websites: ${websiteCount}`);
  
  console.log("=== DEBUG: ALL BLOG POSTS ===");
  allBlogPosts.forEach(post => {
    console.log(`Post: ${post.slug}, Date: ${post.data.pubDate}, Tags: [${post.data.tags?.join(', ') || 'none'}]`);
  });
}

// Sort collections by publication date (newest first)
const sortedBlogPosts = allBlogPosts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
const sortedProducts = allProducts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
const sortedApps = allApps.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
const sortedWebsites = allWebsites.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Combine and prepare all resources
let allResources: Resource[] = [];

// Map blog posts to resources
allResources = [
  ...allResources,
  ...sortedBlogPosts.map((post) => ({
    type: 'blog' as const,
    data: post,
    slug: post.slug,
    title: post.data.title,
    description: post.data.description || '',
    image: '', // No image
    pubDate: post.data.pubDate,
    updatedDate: post.data.updatedDate,
    isSponsored: post.data.isSponsored || false,
    tags: post.data.tags || []
  }) as Resource)
];

// Map products to resources
allResources = [
  ...allResources,
  ...sortedProducts.map((product) => ({
    type: 'product' as const,
    data: product,
    slug: product.slug,
    title: product.data.title,
    description: product.data.description || '',
    image: '',
    pubDate: product.data.pubDate || new Date(),
    updatedDate: product.data.updatedDate,
    affiliateLink: product.data.affiliateLink || '',
    tags: product.data.tags || []
  }) as Resource)
];

// Map apps to resources
allResources = [
  ...allResources,
  ...sortedApps.map((app) => ({
    type: 'app' as const,
    data: app,
    slug: app.slug,
    title: app.data.title,
    description: app.data.description || '',
    image: '',
    pubDate: app.data.pubDate || new Date(),
    updatedDate: app.data.updatedDate,
    isSponsored: app.data.isSponsored || false,
    platform: app.data.platform || [],
    downloadLink: app.data.downloadLink || '',
    tags: app.data.tags || []
  }) as Resource)
];

// Map websites to resources
allResources = [
  ...allResources,
  ...sortedWebsites.map((website) => ({
    type: 'website' as const,
    data: website,
    slug: website.slug,
    title: website.data.title,
    description: website.data.description || '',
    image: '',
    pubDate: website.data.pubDate || new Date(),
    updatedDate: website.data.updatedDate,
    isSponsored: website.data.isSponsored || false,
    url: website.data.url || '',
    tags: website.data.tags || []
  }) as Resource)
];

// Sort combined resources by date
let filteredResources = allResources.sort((a, b) => b.pubDate.valueOf() - a.pubDate.valueOf());

// Filter by content type
if (contentType && contentType !== 'all') {
  filteredResources = filteredResources.filter(resource => resource.type === contentType);
}

// Filter by tag/category
if (tag && tag !== 'all') {
  const lowerTag = tag.toLowerCase();
  filteredResources = filteredResources.filter(resource =>
    Array.isArray(resource.tags) &&
    resource.tags.map(t => t.toLowerCase()).includes(lowerTag)
  );
}

// Apply limit
if (limit && !tag) {
  filteredResources = filteredResources.slice(0, limit);
} else if (limit && tag) {
  filteredResources = filteredResources.slice(0, Math.max(30, limit));
}

// Get all unique tags/categories from all resources
const allTagsSet = new Set<string>();
allResources.forEach(resource => {
  if (resource.tags && Array.isArray(resource.tags)) {
    resource.tags.forEach(tag => allTagsSet.add(tag));
  }
  if (resource.categories && Array.isArray(resource.categories)) {
    resource.categories.forEach(category => allTagsSet.add(category));
  }
});
const allTags = Array.from(allTagsSet).sort();

// Calculate counts for each content type
const categoryCounts = {
  all: allResources.length,
  blog: allResources.filter(r => r.type === 'blog').length,
  product: allResources.filter(r => r.type === 'product').length,
  website: allResources.filter(r => r.type === 'website').length,
  app: allResources.filter(r => r.type === 'app').length,
};

// Calculate debug information
const totalResources = filteredResources.length;
---

<section class="browse-container" id="browse-section">
  <div class="container">
    <h2 class="section-title">Look around. Stay Awhile.</h2>
    <p class="section-description">
      Search through the collection of blog posts, products, apps, and websites to find something that may or may not help you ü§∑‚Äç‚ôÇÔ∏è
    </p>
    
    {debug && (
      <div class="debug-panel">
        <h3>Debug Information</h3>
        <ul>
          <li>Blog collection: {blogCount} items</li>
          <li>Products: {productCount} items</li>
          <li>Apps: {appCount} items</li>
          <li>Websites: {websiteCount} items</li>
          <li>Total resources loaded: {totalResources}</li>
          <li>Blog Posts: {categoryCounts.blog}</li>
          <li>Products: {categoryCounts.product}</li>
          <li>Websites: {categoryCounts.website}</li>
          <li>Apps: {categoryCounts.app}</li>
          <li>Current filter: {contentType}</li>
          <li>Tag filter: {tag || 'none'}</li>
          <li>Include All Dates: {includeAllDates ? 'Yes' : 'No'}</li>
        </ul>
      </div>
    )}
    
    <div class="filter-container">
      <div class="search-box">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M11 19C15.4183 19 19 15.4183 19 11C19 6.58172 15.4183 3 11 3C6.58172 3 3 6.58172 3 11C3 15.4183 6.58172 19 11 19Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          <path d="M21 21L16.65 16.65" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        <input type="text" id="resource-search" placeholder="Search..." />
      </div>
      
      <!-- Content type filter tabs -->
      <div class="content-type-tabs">
        <button class="content-type-tab active" data-type="all">All</button>
        <button class="content-type-tab" data-type="blog">Blog Posts</button>
        <button class="content-type-tab" data-type="product">Products</button>
        <button class="content-type-tab" data-type="website">Websites</button>
        <button class="content-type-tab" data-type="app">Apps</button>
        
        <button class="content-type-tab shuffle-button" data-action="shuffle">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="margin-right: 4px;">
            <path d="M16 3H21V8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M4 20L21 3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M21 16V21H16" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M15 15L21 21" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M4 4L9 9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
          Shuffle
        </button>
      </div>
      
      <!-- Tags filter -->
      <div class="tags-filter">
        <h3 class="filter-title">Filter by tags</h3>
        <div class="filter-tabs" id="tag-filters">
          <button class="filter-tab active" data-tag="all">All</button>
          {allTags.map((tagName) => (
            <button class="filter-tab" data-tag={tagName}>{tagName}</button>
          ))}
        </div>
      </div>
    </div>

    <!-- Resource cards grid -->
    <div class="resources-grid" id="resources-container">
      {filteredResources.length > 0 ? (
        filteredResources.map((resource) => {
          // Base props for all content types, with image removed
          const baseProps = {
            title: resource.title,
            link: `/${resource.type}/${resource.slug}`,
            description: resource.description,
            contentType: resource.type,
            isSponsored: resource.isSponsored,
            pubDate: resource.pubDate.toISOString(),
            updatedDate: resource.updatedDate?.toISOString(),
            image: '', // No image
          };
          
          // Add specific props based on content type
          let specificProps = {};
          
          if (resource.type === 'blog') {
            specificProps = {
              tags: resource.tags || [],
              type: resource.type || '',
            };
          } 
          else if (resource.type === 'product') {
            specificProps = {
              tags: resource.tags || [],
              categories: resource.categories || [],
              price: resource.price || 0,
              currency: resource.currency || 'USD',
              rating: resource.rating || 0,
              affiliateLink: resource.affiliateLink || '',
            };
          }
          else if (resource.type === 'app') {
            specificProps = {
              tags: resource.tags || [],
              categories: resource.categories || [],
              platform: resource.platform || [],
              price: resource.price || 0,
              currency: resource.currency || 'USD',
              rating: resource.rating || 0,
              developer: resource.developer || '',
              version: resource.version || '',
              isFreemium: resource.isFreemium || false,
              hasSubscription: resource.hasSubscription || false,
              downloadLink: resource.downloadLink || '',
            };
          }
          else if (resource.type === 'website') {
            specificProps = {
              tags: resource.tags || [],
              categories: resource.categories || [],
              url: resource.url || '',
              technologies: resource.technologies || [],
              services: resource.services || [],
              hasFreeTier: resource.hasFreeTier || false,
              hasPaidPlan: resource.hasPaidPlan || false,
              monthlyPrice: resource.monthlyPrice || 0,
              currency: resource.currency || 'USD',
              rating: resource.rating || 0,
            };
          }
          
          // Merge the base props with specific props
          const props = { ...baseProps, ...specificProps };
          
          return (
            <ItemCard {...props} />
          );
        })
      ) : (
        <div class="no-resources">
          <p>No resources found matching the current filters.</p>
        </div>
      )}
    </div>
    
    <!-- Pagination -->
    <div id="pagination-container" class="pagination-container"></div>
    
    {debug && (productCount === 0 || appCount === 0 || websiteCount === 0) && (
      <div class="debug-help">
        <h3>Troubleshooting: Missing Collections</h3>
        <p>It looks like some of your collections might not have any items. Here's what to check:</p>
        <ul>
          {productCount === 0 && <li>Make sure you have created product files in <code>src/content/products/</code> directory</li>}
          {appCount === 0 && <li>Make sure you have created app files in <code>src/content/apps/</code> directory</li>}
          {websiteCount === 0 && <li>Make sure you have created website files in <code>src/content/websites/</code> directory</li>}
          <li>Ensure your content schema in <code>src/content/config.ts</code> has all collections defined</li>
          <li>Check that your content files have the correct frontmatter structure</li>
        </ul>
      </div>
    )}
  </div>
</section>

<style>
  /* * {
    border: 1px solid red;
  } */
  
  .section-title {
    margin-bottom: var(--spacing-lg);
    text-align: center;
  }
  
  .section-description {
    text-align: center;
    margin-bottom: var(--spacing-lg);
    max-width: 700px;
    margin: 0 auto var(--spacing-lg);
  }
  .container {
    position: relative;
    padding-top: 3rem;
  }

  .filter-container {
    margin-bottom: var(--spacing-lg);
  }
  
  .search-box {
    position: relative;
    max-width: 300px;
    margin: 0 auto var(--spacing-md);
  }
  
  .search-box svg {
    position: absolute;
    left: 10px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--color-text-light);
  }
  
  .search-box input {
    padding-left: 40px;
    border-radius: var(--radius-md);
    width: 100%;
  }
  
  .content-type-tabs,
  .filter-tabs {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: var(--spacing-xs);
    margin-bottom: var(--spacing-md);
    
  }
  
  .content-type-tab,
  .filter-tab {
    padding: var(--spacing-sm) var(--spacing-md);
    border-radius: var(--radius-md);
    border: 1px solid var(--color-border);
    font-family: 'Roboto Mono', monospace;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s;
    background-color: var(--color-background);
    color: var(--color-text-light);
  }
  
  .content-type-tab.active,
  .filter-tab.active {
    background-color: var(--color-primary);
    color: var(--color-white);
    font-weight: 600;
  }
  
  .content-type-tab:hover:not(.active),
  .filter-tab:hover:not(.active) {
    background-color: var(--color-white);
    color: var(--color-primary);
  }

  /* Tags Filter styles */
  .tags-filter {
    margin-top: var(--spacing-md);
  }
  
  .filter-title {
    text-align: center;
    font-size: 1.1rem;
    margin-bottom: var(--spacing-sm);
    color: var(--color-text-light);
  }
  
  /* Make the tags filter horizontally scrollable on smaller screens */
  .filter-tabs {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: var(--spacing-xs);
    margin-bottom: var(--spacing-md);
    max-width: 90%;
    margin-left: auto;
    margin-right: auto;
  }
  
  .resources-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--spacing-sm);
    max-width: 100%;
    margin: 0 auto;
    width: 100%;
    min-width: 200px;
    
  }
  
  .no-resources {
    grid-column: 1 / -1;
    text-align: center;
    padding: var(--spacing-xl);
    /* background-color: var(--color-white); */
    border-radius: var(--radius-lg);
  }
  
  .debug-panel {
    background-color: #f0f8ff;
    border-radius: var(--radius-md);
    padding: var(--spacing-md);
    margin-bottom: var(--spacing-lg);
    border: 1px solid #b0d8ff;
  }
  
  .debug-panel h3 {
    margin-top: 0;
  }
  
  .debug-help {
    margin-top: var(--spacing-lg);
    padding: var(--spacing-md);
    background-color: #fff8f0;
    border-radius: var(--radius-md);
    border: 1px solid #ffe0b0;
  }
  
  .debug-help pre {
    background-color: #f5f5f5;
    padding: var(--spacing-sm);
    border-radius: var(--radius-sm);
    overflow-x: auto;
  }
  
  .filter-debug {
    margin-top: var(--spacing-lg);
    padding: var(--spacing-md);
    background-color: #f5f5f5;
    border-radius: var(--radius-md);
    font-family: monospace;
    display: none;
  }
  
  @media (max-width: 992px) {
    .resources-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (max-width: 640px) {
    .resources-grid {
      grid-template-columns: 1fr;
    }
    
    .content-type-tabs,
    .filter-tabs {
      overflow-x: auto;
      padding-bottom: var(--spacing-sm);
      margin-bottom: var(--spacing-md);
      -webkit-overflow-scrolling: touch;
      scrollbar-width: none;
    }
    
    .content-type-tabs::-webkit-scrollbar,
    .filter-tabs::-webkit-scrollbar {
      display: none;
    }
    
    .content-type-tab,
    .filter-tab {
      white-space: nowrap;
    }
  }
  
  /* Styles for the shuffle button and animations */
  .shuffle-button {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--color-white);
    color: var(--color-text);
    border: 1px dashed var(--color-border);
  }
  
  .shuffle-button:hover {
    background-color: var(--color-background-light);
    transform: rotate(5deg);
  }
  
  .shuffle-button svg {
    transition: transform 0.3s ease;
  }
  
  .shuffle-button:hover svg {
    transform: rotate(180deg);
  }
  
  /* Animation for card shuffling */
  .card.shuffled {
    transform: scale(0.95);
    opacity: 0.7;
    transition: all 0.2s ease-in-out;
  }
  
  .card.shuffle-complete {
    transform: scale(1);
    opacity: 1;
    transition: all 0.3s ease-in-out;
  }
  /* Add these styles to your existing <style> block */
  .pagination-container {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: var(--spacing-lg);
    gap: var(--spacing-md);
  }
  
  .pagination-button {
    padding: var(--spacing-sm) var(--spacing-md);
    border-radius: var(--radius-md);
    border: 1px solid var(--color-border);
    background-color: var(--color-white);
    cursor: pointer;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
  }
  
  .pagination-button:hover:not(:disabled) {
    background-color: var(--color-primary-light);
    color: var(--color-white);
  }
  
  .pagination-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .page-indicator {
    font-size: 0.9rem;
    color: var(--color-text-light);
    padding: var(--spacing-sm);
  }
  
  @media (max-width: 640px) {
    .pagination-container {
      flex-direction: column;
      gap: var(--spacing-sm);
    }
  }
</style>

<script is:inline>
  function initFilters() {
    // All your setup code goes here
    const contentTypeTabs = document.querySelectorAll('.content-type-tab');
    const filterTabs = document.querySelectorAll('.filter-tab');
    const resourceCards = document.querySelectorAll('.card.resource-card');
    const searchInput = document.getElementById('resource-search');
    const shuffleButton = document.querySelector('.shuffle-button');
    const resourcesContainer = document.getElementById('resources-container');
    const paginationContainer = document.getElementById('pagination-container');

    const isDevelopmentMode =
      window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';

    const postsPerPage = 6;
    let currentPage = 1;
    let filteredCards = [];

    let activeContentType = 'all';
    let activeTag = 'all';

    function safeLog(...args) {
      if (isDevelopmentMode) console.log(...args);
    }

    function sanitizeSearchInput(input) {
      if (typeof input !== 'string') return '';
      return input.replace(/<\/?[^>]+(>|$)/g, '').trim().substring(0, 100);
    }

    function isValidContentType(type) {
      return ['all', 'blog', 'product', 'website', 'app'].includes(type);
    }

    function filterResources() {
      try {
        const searchTerm = sanitizeSearchInput(searchInput?.value || '').toLowerCase();
        filteredCards = [];

        resourceCards.forEach((card) => {
          const cardContentType = card.getAttribute('data-content-type');
          const title = card.querySelector('.card-title')?.textContent?.toLowerCase() || '';
          const description =
            card.querySelector('.card-description')?.textContent?.toLowerCase() ||
            card.querySelector('p')?.textContent?.toLowerCase() ||
            '';

          let cardTags = [];
          const tagsStr = card.getAttribute('data-tags');
          if (tagsStr) {
            cardTags = tagsStr.toLowerCase().split(',').map((tag) => tag.trim());
          }

          const contentTypeMatch = activeContentType === 'all' || cardContentType === activeContentType;
          const tagMatch = activeTag === 'all' || cardTags.includes(activeTag.toLowerCase());
          const searchMatch =
            searchTerm === '' ||
            title.includes(searchTerm) ||
            description.includes(searchTerm) ||
            cardTags.some((tag) => tag.includes(searchTerm));

          if (contentTypeMatch && tagMatch && searchMatch) {
            filteredCards.push(card);
          } else {
            card.style.display = 'none';
          }
        });

        updatePageDisplay();
      } catch (error) {
        safeLog('Error in filterResources:', error);
      }
    }

    function createPagination(totalItems) {
      if (!paginationContainer) return;
      paginationContainer.innerHTML = '';
      const totalPages = Math.ceil(totalItems / postsPerPage);
      if (totalPages <= 1) {
        paginationContainer.style.display = 'none';
        return;
      }

      paginationContainer.style.display = 'flex';

      const prevButton = document.createElement('button');
      prevButton.className = 'pagination-button prev-button';
      prevButton.textContent = '‚Üê Prev';
      prevButton.disabled = currentPage === 1;
      prevButton.onclick = () => {
        if (currentPage > 1) {
          currentPage--;
          updatePageDisplay();
        }
      };

      const nextButton = document.createElement('button');
      nextButton.className = 'pagination-button next-button';
      nextButton.textContent = 'Next ‚Üí';
      nextButton.disabled = currentPage >= totalPages;
      nextButton.onclick = () => {
        if (currentPage < totalPages) {
          currentPage++;
          updatePageDisplay();
        }
      };

      const pageIndicator = document.createElement('span');
      pageIndicator.className = 'page-indicator';
      pageIndicator.textContent = `Page ${currentPage} of ${totalPages}`;

      paginationContainer.append(prevButton, pageIndicator, nextButton);
    }

    function updatePageDisplay() {
      filteredCards.forEach((card) => (card.style.display = 'none'));
      const start = (currentPage - 1) * postsPerPage;
      const end = Math.min(start + postsPerPage, filteredCards.length);
      for (let i = start; i < end; i++) {
        if (filteredCards[i]) {
          filteredCards[i].style.display = '';
        }
      }
      createPagination(filteredCards.length);
    }

    function shuffleVisibleCards() {
      if (filteredCards.length <= 1) return;
      const cardsToShuffle = [...filteredCards];
      for (let i = cardsToShuffle.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [cardsToShuffle[i], cardsToShuffle[j]] = [cardsToShuffle[j], cardsToShuffle[i]];
      }

      filteredCards.forEach((card) => resourcesContainer.removeChild(card));
      cardsToShuffle.forEach((card) => resourcesContainer.appendChild(card));
      filteredCards = cardsToShuffle;

      currentPage = 1;
      updatePageDisplay();
    }

    contentTypeTabs.forEach((tab) => {
      tab.addEventListener('click', () => {
        if (tab.getAttribute('data-action') === 'shuffle') return;
        contentTypeTabs.forEach((t) => t.classList.remove('active'));
        tab.classList.add('active');
        const type = tab.getAttribute('data-type');
        activeContentType = isValidContentType(type) ? type : 'all';
        currentPage = 1;
        filterResources();
      });
    });

    filterTabs.forEach((tab) => {
      tab.addEventListener('click', () => {
        filterTabs.forEach((t) => t.classList.remove('active'));
        tab.classList.add('active');
        activeTag = tab.getAttribute('data-tag')?.substring(0, 50) || 'all';
        currentPage = 1;
        filterResources();
      });
    });

    if (searchInput) {
      let searchTimeout;
      searchInput.addEventListener('input', () => {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          currentPage = 1;
          filterResources();
        }, 300);
      });
    }

    if (shuffleButton) {
      shuffleButton.addEventListener('click', () => {
        shuffleVisibleCards();
      });
    }

    filterResources();
  }

  document.addEventListener('DOMContentLoaded', initFilters);
  document.addEventListener('astro:after-swap', initFilters);
</script>