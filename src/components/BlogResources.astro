---
// src/components/BlogResources.astro
import { getCollection } from 'astro:content';
import ResourceItem from './ResourceItem.astro';

// You can pass these as props if you want to filter by tag or limit the number of posts
interface Props {
  tag?: string;
  limit?: number;
}

const { tag, limit } = Astro.props;

// Get all blog posts and sort by publication date (newest first)
const allPosts = await getCollection('blog');
let filteredPosts = allPosts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Filter by tag if specified
if (tag) {
  filteredPosts = filteredPosts.filter(post => post.data.tags.includes(tag));
}

// Limit the number of posts if specified
if (limit) {
  filteredPosts = filteredPosts.slice(0, limit);
}
---

<section class="resources-section bg-light">
  <div class="container">
    <h2 class="section-title">Latest Resources</h2>
    
    <!-- Filter tabs - You could generate these dynamically based on your tags -->
    <div class="filter-container">
      <div class="search-box">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M11 19C15.4183 19 19 15.4183 19 11C19 6.58172 15.4183 3 11 3C6.58172 3 3 6.58172 3 11C3 15.4183 6.58172 19 11 19Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          <path d="M21 21L16.65 16.65" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        <input type="text" id="resource-search" placeholder="Search..." />
      </div>
      
      <div class="filter-tabs">
        <button class="filter-tab active" data-tag="all">All</button>
        <button class="filter-tab" data-tag="Tips">Tips</button>
        <button class="filter-tab" data-tag="Advice">Advice</button>
        <button class="filter-tab" data-tag="Contracts">Contracts</button>
        <button class="filter-tab" data-tag="Career">Career</button>
        <button class="filter-tab" data-tag="Communication">Communication</button>
      </div>
    </div>

    <!-- Resource cards grid -->
    <div class="resources-grid" id="resources-container">
      {filteredPosts.map((post) => (
        <ResourceItem 
          title={post.data.title}
          imageUrl={post.data.image || '/images/default.png'}
          link={`/blog/${post.slug}`}
          description={post.data.description}
          tags={post.data.tags}
          type={post.data.type}
          isSponsored={post.data.isSponsored}
        />
      ))}
    </div>
  </div>
</section>

<style>
  .section-title {
    margin-bottom: var(--spacing-lg);
    text-align: center;
  }
  
  .filter-container {
    margin-bottom: var(--spacing-lg);
  }
  
  .search-box {
    position: relative;
    max-width: 300px;
    margin: 0 auto var(--spacing-md);
  }
  
  .search-box svg {
    position: absolute;
    left: 10px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--color-text-light);
  }
  
  .search-box input {
    padding-left: 40px;
    border-radius: var(--radius-full);
  }
  
  .filter-tabs {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: var(--spacing-xs);
    margin-bottom: var(--spacing-lg);
  }
  
  .filter-tab {
    padding: var(--spacing-sm) var(--spacing-md);
    border-radius: var(--radius-full);
    border: none;
    background-color: var(--color-white);
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s;
  }
  
  .filter-tab.active {
    background-color: var(--color-primary);
    color: var(--color-white);
    font-weight: 600;
  }
  
  .filter-tab:hover:not(.active) {
    background-color: var(--color-background);
  }
  
  .resources-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--spacing-md);
  }
  
  @media (max-width: 992px) {
    .resources-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (max-width: 640px) {
    .resources-grid {
      grid-template-columns: 1fr;
    }
    
    .filter-tabs {
      overflow-x: auto;
      padding-bottom: var(--spacing-sm);
      margin-bottom: var(--spacing-md);
      -webkit-overflow-scrolling: touch;
      scrollbar-width: none;
    }
    
    .filter-tabs::-webkit-scrollbar {
      display: none;
    }
    
    .filter-tab {
      white-space: nowrap;
    }
  }
</style>

<script is:inline>
  // Client-side filtering functionality
  document.addEventListener('DOMContentLoaded', () => {
    const filterTabs = document.querySelectorAll('.filter-tab');
    const resourceCards = document.querySelectorAll('.resource-card');
    const searchInput = document.getElementById('resource-search');
    
    // Filter by tag
    filterTabs.forEach(tab => {
      tab.addEventListener('click', () => {
        // Update active tab
        filterTabs.forEach(t => t.classList.remove('active'));
        tab.classList.add('active');
        
        const selectedTag = tab.getAttribute('data-tag');
        
        resourceCards.forEach(card => {
          if (selectedTag === 'all') {
            card.style.display = 'block';
          } else {
            // Check if the card has the selected tag
            const cardTags = Array.from(card.querySelectorAll('.tag')).map(tag => tag.textContent);
            
            if (cardTags.includes(selectedTag)) {
              card.style.display = 'block';
            } else {
              card.style.display = 'none';
            }
          }
        });
      });
    });
    
    // Filter by search term
    searchInput.addEventListener('input', () => {
      const searchTerm = searchInput.value.toLowerCase();
      
      resourceCards.forEach(card => {
        const title = card.querySelector('.card-title').textContent.toLowerCase();
        const description = card.querySelector('.card-description')?.textContent.toLowerCase() || '';
        const tags = Array.from(card.querySelectorAll('.tag')).map(tag => tag.textContent.toLowerCase());
        
        if (
          title.includes(searchTerm) || 
          description.includes(searchTerm) || 
          tags.some(tag => tag.includes(searchTerm))
        ) {
          card.style.display = 'block';
        } else {
          card.style.display = 'none';
        }
      });
    });
  });
</script>