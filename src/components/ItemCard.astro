---
interface BaseProps {
  title: string;
  description?: string;
  link: string;
  image?: string;
  contentType: 'blog' | 'product' | 'app' | 'website';
  isSponsored?: boolean;
  pubDate?: string;
  updatedDate?: string;
  type?: string;
}

interface BlogProps extends BaseProps {
  contentType: 'blog';
  tags?: string[];
}

interface ProductProps extends BaseProps {
  contentType: 'product';
  categories?: string[];
  affiliateLink?: string;
}

interface AppProps extends BaseProps {
  contentType: 'app';
  categories?: string[];
  platform?: string[];
  downloadLink?: string;
  tags?: string[];
}

interface WebsiteProps extends BaseProps {
  contentType: 'website';
  categories?: string[];
  url?: string;
  tags?: string[];
}

type Props = BlogProps | ProductProps | AppProps | WebsiteProps;

const props = Astro.props as Props;

const {
  title,
  description = "",
  link,
  image,
  contentType,
  isSponsored = false,
  pubDate,
  type,
} = props;

if (!pubDate) return;

const getTags = (): string[] => {
  if (contentType === 'blog') return props.tags ?? [];
  return (props as any).categories ?? [];
};
const tags = getTags();

const isAffiliate = contentType === 'product' && !!props.affiliateLink;
const isExternal =
  (contentType === 'product' && isAffiliate) ||
  (contentType === 'app' && !!props.downloadLink) ||
  (contentType === 'website' && !!props.url);

const getHref = () => {
  if (contentType === 'product' && props.affiliateLink) return props.affiliateLink;
  if (contentType === 'app' && props.downloadLink) return props.downloadLink;
  if (contentType === 'website' && props.url) return props.url;
  return link;
};

const getContentEmoji = () => {
  switch (contentType) {
    case 'blog': return 'üìù Blog';
    case 'product': return 'üõçÔ∏è Product';
    case 'app': return 'üì± App';
    case 'website': return 'üåê Website';
    default: return '';
  }
};
const contentEmojiLabel = getContentEmoji();
---

<div 
  class="resource-card card"
  data-content-type={contentType}
  data-tags={tags.join(',')}
  data-tags-lower={tags.map(t => t.toLowerCase()).join(',')}
  data-pub-date={pubDate}
>
  <a href={getHref()} class="card-link" target={isExternal ? "_blank" : "_self"} rel={isExternal ? "noopener noreferrer" : ""}>
    <div class="card-content">
      <div class="card-header">
        {type && type.toLowerCase() !== contentType ? (
          <span class="badge custom-badge">{type}</span>
        ) : null}
        <span class="badge content-badge">{contentEmojiLabel}</span>
      </div>

      <div class="card-body">
        <h3 class="card-title">{title}</h3>
        {description && <p class="card-description">{description}</p>}
        {tags.length > 0 && (
          <div class="card-tags">
            {tags.slice(0, 2).map((tag: string) => (
              <span class="card-tag">{tag}</span>
            ))}
          </div>
        )}
      </div>
    </div>
  </a>
</div>

<style>
  .resource-card.card {
  border: 1px solid #333;
  border-radius: 8px;
  padding: 0;
  background: var(--color-white);
  transition: box-shadow 0.2s ease;
  display: flex;
  flex-direction: column;
  height: 100%;
}

.resource-card.card:hover {
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.card-link {
  text-decoration: none;
  color: inherit;
  display: flex;
  flex-direction: column;
  height: 100%;
}

.card-content {
  display: flex;
  flex-direction: column;
  padding: 16px;
  flex: 1;
}

.card-header {
  display: flex;
  gap: 8px;
  margin-bottom: 12px;
}

.card-body {
  display: flex;
  flex-direction: column;
  flex: 1;
}

.card-title {
  font-size: 1.2rem;
  margin: 0 0 8px;
  font-weight: 600;
}

.card-description {
  font-size: 0.95rem;
  color: #555;
  margin: 0 0 12px;
  line-height: 1.4;
}

.card-tags {
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
  margin-top: auto; /* pushes tags to bottom of card */
}

.card-tag {
  background: #eef;
  padding: 2px 6px;
  border-radius: 3px;
  font-size: 0.8rem;
  white-space: nowrap;
}

.badge {
  display: inline-flex;
  align-items: center;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 0.8rem;
  white-space: nowrap;
}

.custom-badge {
  background: #0c5460;
  color: #fff;
}

.content-badge {
  background: #206A5D;
  color: #fff;
}

  .card-title {
    font-size: 1.2rem;
    margin: 0 0 8px;
    font-weight: 600;
  }

  .card-description {
    font-size: 0.95rem;
    color: #555;
    margin: 0 0 12px;
    line-height: 1.4;
  }

  .card-tags {
    margin-top: auto;
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
  }

  .card-tag {
    background: #E8E6E3;
    border: 1px solid var(--color-border);
    color: var(--color-primary);
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 0.8rem;
    white-space: nowrap;
  }
</style>