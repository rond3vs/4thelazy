---
// src/components/ItemCard.astro
// Common properties for all card types
interface BaseProps {
  title: string;
  description?: string;
  link: string;
  image?: string; // Still included in interface but not used in component
  contentType: 'blog' | 'product' | 'app' | 'website';
  isSponsored?: boolean;
  pubDate?: string;
  updatedDate?: string;
}

// Blog-specific properties
interface BlogProps extends BaseProps {
  contentType: 'blog';
  tags?: string[];
  type?: string;
}

// Product-specific properties
interface ProductProps extends BaseProps {
  contentType: 'product';
  categories?: string[];
  price?: number;
  currency?: string;
  rating?: number;
  affiliateLink?: string;
}

// App-specific properties
interface AppProps extends BaseProps {
  contentType: 'app';
  categories?: string[];
  platform?: string[];
  price?: number;
  currency?: string;
  rating?: number;
  developer?: string;
  version?: string;
  isFreemium?: boolean;
  hasSubscription?: boolean;
  downloadLink?: string;
}

// Website-specific properties
interface WebsiteProps extends BaseProps {
  contentType: 'website';
  categories?: string[];
  url?: string;
  technologies?: string[];
  services?: string[];
  hasFreeTier?: boolean;
  hasPaidPlan?: boolean;
  monthlyPrice?: number;
  currency?: string;
  rating?: number;
}

// Union type of all possible props
type Props = BlogProps | ProductProps | AppProps | WebsiteProps;

// Get all props
const props = Astro.props as Props;

// Common properties
const {
  title,
  description = "",
  link,
  contentType,
  isSponsored = false,
  pubDate,
} = props;

// Format date for display
const formatDate = (dateString: string | undefined) => {
  if (!dateString) return "";
  
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  });
};

// Get content-specific tags/categories
const getTags = () => {
  if (contentType === 'blog' && 'tags' in props) {
    return props.tags;
  } else if (contentType !== 'blog' && 'categories' in props) {
    return props.categories;
  }
  return [];
};

// Check if the URL should be external
const isExternal = 
  (contentType === 'product' && 'affiliateLink' in props && !!props.affiliateLink) || 
  (contentType === 'app' && 'downloadLink' in props && !!props.downloadLink) ||
  (contentType === 'website' && 'url' in props && !!props.url);

// Get the correct href for the card
const getHref = () => {
  if (contentType === 'product' && isAffiliate && 'affiliateLink' in props) {
    return props.affiliateLink;
  } else if (contentType === 'app' && 'downloadLink' in props && props.downloadLink) {
    return props.downloadLink;
  } else if (contentType === 'website' && 'url' in props && props.url) {
    return props.url;
  }
  return link;
};

// Check if card is affiliate product
const isAffiliate = contentType === 'product' && 'affiliateLink' in props && !!props.affiliateLink;

// Get all tags and categories and join into comma-separated string for data attributes
const allTagsString = getTags()?.join(',') || '';
const allTagsLowercase = getTags()?.map(tag => tag.toLowerCase()).join(',') || '';
---

<div class="resource-card card" 
  data-content-type={contentType}
  data-tags={allTagsString}
  data-tags-lower={allTagsLowercase}
  data-pub-date={pubDate}>
  
  <a href={getHref()} class="card-link" target={isExternal ? "_blank" : "_self"} rel={isExternal ? "noopener noreferrer" : ""}>
    <div class="card-content">
      <div class="card-header">
        <div class="card-meta">
          <!-- Badge for content type -->
          <span class="content-badge">{contentType}</span>
          
          {isSponsored && <span class="sponsored-badge">Sponsored</span>}
          
          {pubDate && (
            <span class="card-date">{formatDate(pubDate)}</span>
          )}
        </div>
        <h3 class="card-title">{title}</h3>
        
      </div>
      
      {description && description.length > 0 && (
        <p class="card-description">{description}</p>
      )}
      
      <!-- Display limited tags -->
      {getTags() && getTags()!.length > 0 && (
        <div class="card-tags">
          {getTags()!.slice(0, 2).map((tag: string) => (
            <span class="card-tag">{tag}</span>
          ))}
        </div>
      )}
    </div>
  </a>
</div>

<style>
  .card {
    border: solid 1px #333;
   
    border-radius: var(--radius-md);
    overflow: hidden;
    transition: transform 0.2s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    height: 100%;
  }
  
  .card:hover {
    transform: translateY(-3px);
  }
  
  .card-link {
    text-decoration: none;
    color: var(--color-text);
    display: block;
    height: 100%;
  }
  
  .card-header {
    margin-bottom: var(--spacing-sm);
  }
  
  .card-image-wrapper,
  .card-image {
    display: none;
  }
  
  .card-meta {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: var(--spacing-lg);
    margin-bottom: var(--spacing-md);
  }
  
  .content-badge {
    background-color: var(--color-primary);
    color: var(--color-white);
    padding: 0.2em 0.5em;
    border-radius: var(--radius-sm);
    font-size: 0.7rem;
    text-transform: capitalize;
  }
  
  .sponsored-badge {
    background-color: rgba(0, 0, 0, 0.6);
    color: white;
    padding: 0.2em 0.5em;
    border-radius: var(--radius-sm);
    font-size: 0.7rem;
  }
  
  .card-content {
    padding: var(--spacing-md);
    display: flex;
    flex-direction: column;
    height: 100%;
  }
  
  .card-title {
    margin-bottom: var(--spacing-sm);
    font-size: 1.16rem;
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    line-height: 1.3;
  }
  
  .card-description {
    font-size: 0.9rem;
    color: var(--color-text-light);
    margin-top: auto;
    margin-bottom: var(--spacing-sm);
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
  }
  
  .card-date {
    font-size: 0.8rem;
    color: var(--color-text-light);
  }
  
  .card-tags {
    display: flex;
    gap: var(--spacing-xs);
    margin-top: auto;
  }
  
  .card-tag {
    background-color: rgba(32, 106, 93, 0.1);
    color: var(--color-primary);
    padding: 0.2em 0.5em;
    border-radius: var(--radius-sm);
    font-size: 0.7rem;
  }
</style>