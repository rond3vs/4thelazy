---
interface BaseProps {
  title: string;
  description?: string;
  link: string;
  image?: string;
  contentType: 'blog' | 'product' | 'app' | 'website';
  isSponsored?: boolean;
  pubDate?: string;
  updatedDate?: string;
  type?: string;
  draft?: boolean;
}

interface BlogProps extends BaseProps {
  contentType: 'blog';
  tags?: string[];
}

interface ProductProps extends BaseProps {
  contentType: 'product';
  tags?: string[];
  affiliateLink?: string;
}

interface AppProps extends BaseProps {
  contentType: 'app';
  platform?: string[];
  downloadLink?: string;
  tags?: string[];
}

interface WebsiteProps extends BaseProps {
  contentType: 'website';
  url?: string;
  tags?: string[];
}

type Props = BlogProps | ProductProps | AppProps | WebsiteProps;

const props = Astro.props as Props;

const {
  title,
  description = "",
  link,
  image,
  contentType,
  isSponsored = false,
  pubDate,
  type,
  draft = false,
} = props;

if (!pubDate || draft) return;

// Tags/Categories fallback
const tags = (Array.isArray(props.tags) ? props.tags
           : Array.isArray((props as any).categories) ? (props as any).categories
           : []) as string[];

// External URL logic
const isExternal = (() => {
  switch (contentType) {
    case 'product': return !!(props as ProductProps).affiliateLink;
    case 'app': return !!(props as AppProps).downloadLink;
    case 'website': return !!(props as WebsiteProps).url;
    default: return false;
  }
})();

const href = (() => {
  if (contentType === 'product' && (props as ProductProps).affiliateLink) {
    return (props as ProductProps).affiliateLink!;
  }
  if (contentType === 'app' && (props as AppProps).downloadLink) {
    return (props as AppProps).downloadLink!;
  }
  if (contentType === 'website' && (props as WebsiteProps).url) {
    return (props as WebsiteProps).url!;
  }
  return link;
})();

const contentEmojiLabel = {
  blog: 'üìù Blog',
  product: 'üõçÔ∏è Product',
  app: 'üì± App',
  website: 'üåê Website',
}[contentType];
---

<div 
  class="resource-card card"
  data-content-type={contentType}
  data-tags={tags.join(',')}
  data-tags-lower={tags.map(t => t.toLowerCase()).join(',')}
  data-pub-date={pubDate}
>
  <a href={href} class="card-link" target={isExternal ? "_blank" : "_self"} rel={isExternal ? "noopener noreferrer" : ""}>
    <div class="card-content">
      <div class="card-header">
        {type && type.toLowerCase() !== contentType && (
          <span class="badge custom-badge">{type}</span>
        )}
        <span class="badge content-badge">{contentEmojiLabel}</span>
        {isSponsored && <span class="badge sponsored-badge">Sponsored</span>}
      </div>

      <div class="card-body">
        <h3 class="card-title">{title}</h3>
        {description && <p class="card-description">{description}</p>}

        {tags.length > 0 && (
          <div class="card-tags">
            {tags.slice(0, 4).map(tag => (
              <span class="card-tag">{tag}</span>
            ))}
          </div>
        )}
      </div>
    </div>
  </a>
</div>

<style>
  .resource-card.card {
    border: 1px solid #333;
    border-radius: 8px;
    padding: 0;
    background: var(--color-white);
    transition: box-shadow 0.2s ease;
    display: flex;
    flex-direction: column;
    height: 100%;
    min-height: 200px;
  }

  .resource-card.card:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .card-link {
    text-decoration: none;
    color: inherit;
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  .card-content {
    display: flex;
    flex-direction: column;
    padding: 16px;
    flex: 1;
  }

  .card-header {
    display: flex;
    gap: 8px;
    margin-bottom: 12px;
    flex-wrap: wrap;
  }

  .card-body {
    display: flex;
    flex-direction: column;
    flex: 1;
  }

  .card-title {
    font-size: 1.2rem;
    margin: 0 0 8px;
    font-weight: 600;
  }

  .card-description {
    font-size: 0.95rem;
    color: #555;
    margin: 0 0 12px;
    line-height: 1.4;
  }

  .card-tags {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
    margin-top: auto;
  }

  .card-tag {
    background: #E8E6E3;
    border: 1px solid var(--color-border);
    color: var(--color-primary);
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 0.8rem;
    white-space: nowrap;
  }

  .badge {
    display: inline-flex;
    align-items: center;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.8rem;
    white-space: nowrap;
  }

  .custom-badge {
    background: #0c5460;
    color: #fff;
  }

  .content-badge {
    background: #206A5D;
    color: #fff;
  }

  .sponsored-badge {
    background: #b91c1c;
    color: #fff;
  }
</style>