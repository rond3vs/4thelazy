---
// SubmitPopup.astro with fixes for form submission issues
---

<div id="submitPopup" class="popup-overlay">
  <div class="popup-content">
    <div class="popup-header">
      <h2>Submit a resource</h2>
      <button id="closePopup" class="close-btn">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M6 18L18 6M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </div>
    <p class="popup-description">
      Submit a resource for other lazy people. If we like it too, we'll feature it on 4thelazy.com.
    </p>
    <form id="submitForm" class="popup-form">
      <div class="form-field">
        <label for="resourceLink">Resource URL</label>
        <input type="url" id="resourceLink" name="resourceLink" placeholder="https://example.com" required
               pattern="https?://.+" title="Please enter a valid URL starting with http:// or https://">
      </div>
      <div class="form-field">
        <label for="emailAddress">Your Email</label>
        <input type="email" id="emailAddress" name="emailAddress" placeholder="you@example.com" required>
      </div>
      
      <!-- Honeypot field to catch bots -->
      <div class="form-field" style="display:none;">
        <input type="text" id="honeypot" name="honeypot" tabindex="-1" autocomplete="off">
      </div>
      
      <!-- CAPTCHA or challenge field -->
      <div class="form-field captcha-field">
        <label for="challenge">Security Check</label>
        <div class="captcha-container">
          <div id="captchaQuestion" class="captcha-question"></div>
          <input type="text" id="challenge" name="challenge" placeholder="Answer here" required>
          <input type="hidden" id="captchaTimestamp" name="captchaTimestamp">
          <input type="hidden" id="captchaExpected" name="captchaExpected">
          <input type="hidden" id="csrfToken" name="csrf_token">
        </div>
      </div>
      
      <div id="formStatus" class="form-status"></div>
      
      <button type="submit" class="submit-btn">
        Submit
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M16 8L21 12L16 16" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </form>
  </div>
</div>

<style>
  /* Base styles */
  :root {
    --color-primary: #206A5D;
    --color-primary-dark: #174d43;
    --color-primary-light: #e8f5f3;
    --color-secondary: #f7b32b;
    --color-white: #ffffff;
    --color-gray-100: #f8f9fa;
    --color-gray-200: #e9ecef;
    --color-gray-300: #dee2e6;
    --color-gray-400: #ced4da;
    --color-gray-500: #adb5bd;
    --color-gray-600: #6c757d;
    --color-gray-700: #495057;
    --color-gray-800: #343a40;
    --color-gray-900: #212529;
    --color-error: #dc3545;
    --color-success: #28a745;
    
    --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.05);
    --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);
    --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1);
    
    --radius-sm: 0.25rem;
    --radius-md: 0.5rem;
    --radius-lg: 0.75rem;
    
    --spacing-xs: 0.25rem;
    --spacing-sm: 0.5rem;
    --spacing-md: 1rem;
    --spacing-lg: 1.5rem;
    --spacing-xl: 2rem;
    
    --font-primary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  /* Popup overlay */
  .popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
    backdrop-filter: blur(4px);
    padding: 1rem;
    box-sizing: border-box;
  }

  .popup-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  /* Popup content container */
  .popup-content {
    background-color: var(--color-white);
    border-radius: var(--radius-lg);
    width: 100%;
    max-width: 480px;
    box-shadow: var(--shadow-lg);
    overflow: hidden;
    animation: popup-fade-in 0.3s ease forwards;
    position: relative;
  }

  @keyframes popup-fade-in {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Popup header styling */
  .popup-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-lg) var(--spacing-lg) var(--spacing-sm);
  }

  .popup-header h2 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--color-gray-900);
  }

  .popup-description {
    padding: 0 var(--spacing-lg);
    margin-top: 0;
    margin-bottom: var(--spacing-md);
    color: var(--color-gray-600);
    font-size: 0.95rem;
    line-height: 1.5;
  }

  /* Close button styling */
  .close-btn {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--color-gray-500);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--spacing-xs);
    border-radius: 50%;
    transition: all 0.2s ease;
  }

  .close-btn:hover {
    color: var(--color-gray-800);
    background-color: var(--color-gray-200);
  }

  /* Form styling */
  .popup-form {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
    padding: var(--spacing-md) var(--spacing-lg) var(--spacing-lg);
  }

  .form-field {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-xs);
  }

  .form-field label {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--color-gray-700);
  }

  .popup-form input[type="url"],
  .popup-form input[type="email"],
  .popup-form input[type="text"] {
    padding: 0.75rem var(--spacing-md);
    font-size: 1rem;
    border: 1px solid var(--color-gray-300);
    border-radius: var(--radius-md);
    background-color: var(--color-white);
    color: var(--color-gray-800);
    transition: all 0.2s ease;
    width: 100%;
  }

  .popup-form input:focus {
    border-color: var(--color-primary);
    outline: none;
    box-shadow: 0 0 0 3px rgba(32, 106, 93, 0.15);
  }

  .popup-form input::placeholder {
    color: var(--color-gray-500);
  }

  /* Error state for form fields */
  .popup-form input.error-field {
    border-color: var(--color-error);
    box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.15);
    animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;
  }

  /* Animation for error fields */
  @keyframes shake {
    10%, 90% { transform: translate3d(-1px, 0, 0); }
    20%, 80% { transform: translate3d(2px, 0, 0); }
    30%, 50%, 70% { transform: translate3d(-3px, 0, 0); }
    40%, 60% { transform: translate3d(3px, 0, 0); }
  }

  /* Spinner animation for submit button */
  .spinner {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  /* Submit button styling */
  .submit-btn {
    background-color: var(--color-primary);
    color: var(--color-white);
    border: none;
    padding: 0.75rem var(--spacing-lg);
    font-weight: 600;
    font-size: 1rem;
    border-radius: var(--radius-md);
    cursor: pointer;
    transition: all 0.2s ease;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-xs);
    margin-top: var(--spacing-sm);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .submit-btn:hover {
    background-color: var(--color-primary-dark);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }

  .submit-btn:active {
    transform: translateY(0);
    box-shadow: var(--shadow-sm);
  }

  .submit-btn:disabled {
    background-color: var(--color-gray-400);
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  /* CAPTCHA field styling */
  .captcha-container {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
  }

  .captcha-question {
    font-weight: 600;
    color: var(--color-primary);
    padding: var(--spacing-sm) 0;
  }
  
  .captcha-field {
    background-color: var(--color-primary-light);
    padding: var(--spacing-md);
    border-radius: var(--radius-md);
    border: 1px solid rgba(32, 106, 93, 0.2);
  }

  .captcha-field label {
    margin-bottom: var(--spacing-xs);
  }

  /* Form status message styling */
  .form-status {
    font-size: 0.9rem;
    padding: var(--spacing-xs) 0;
    min-height: 1.5rem;
    color: var(--color-primary);
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .form-status.error {
    color: var(--color-error);
    background-color: rgba(220, 53, 69, 0.1);
    border-radius: var(--radius-md);
    padding: var(--spacing-sm);
    text-align: center;
  }

  .form-status.success {
    color: var(--color-success);
    background-color: rgba(40, 167, 69, 0.1);
    border-radius: var(--radius-md);
    padding: var(--spacing-sm);
    text-align: center;
  }

  /* Pulsating effect for loading state */
  .form-status.loading {
    animation: pulse 1.5s infinite;
  }

  @keyframes pulse {
    0% { opacity: 0.6; }
    50% { opacity: 1; }
    100% { opacity: 0.6; }
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    .popup-content {
      max-width: 100%;
      border-radius: var(--radius-md);
    }

    .popup-header h2 {
      font-size: 1.25rem;
    }

    .popup-form {
      padding: var(--spacing-md);
    }
    
    .popup-overlay {
      padding: 0.5rem;
    }
  }
</style>

<script is:inline>
document.addEventListener('DOMContentLoaded', () => {
  const closePopup = document.getElementById('closePopup');
  const submitPopup = document.getElementById('submitPopup');
  const submitForm = document.getElementById('submitForm');
  const formStatus = document.getElementById('formStatus');
  const honeypot = document.getElementById('honeypot');
  const challenge = document.getElementById('challenge');
  
  // Hardcoded Google Script URL as a fallback
  const FALLBACK_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbwdfPXyQU6IId6Gu6JPGvm_1lk9s2C0pqdhddI3anOIhVqxjeQMgoSzFZfp9i4L0pDO/exec';
  
  // Configuration variables
  let googleScriptUrl = '';
  
  // Try to load configuration first
  try {
    fetch('/config.json')
    .then(response => {
      if (!response.ok) {
        throw new Error('Config file not found');
      }
      return response.json();
    })
    .then(config => {
      if (config && config.googleScriptUrl) {
        googleScriptUrl = config.googleScriptUrl;
        console.log('Loaded Google Script URL from config:', googleScriptUrl);
      } else {
        throw new Error('Invalid config format');
      }
    })
    .catch(error => {
      console.warn('Could not load configuration:', error);
      googleScriptUrl = FALLBACK_SCRIPT_URL;
      console.log('Using fallback Google Script URL:', googleScriptUrl);
    });
  } catch (e) {
    console.warn('Error in config loading:', e);
    googleScriptUrl = FALLBACK_SCRIPT_URL;
    console.log('Using fallback Google Script URL due to error:', googleScriptUrl);
  }
  
  // Generate a secure token with high entropy
  const generateToken = () => {
    const array = new Uint8Array(32);
    window.crypto.getRandomValues(array);
    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');
  };
  
  // Generate a simpler CAPTCHA (fix for potential issues with complex math)
  function generateCaptcha() {
    // Simpler operation: just addition with small numbers
    const a = Math.floor(Math.random() * 5) + 1;
    const b = Math.floor(Math.random() * 5) + 1;
    
    const question = `What is ${a} + ${b}?`;
    const answer = (a + b).toString();
    
    document.getElementById('captchaQuestion').textContent = question;
    document.getElementById('captchaExpected').value = btoa(answer); // Base64 encode the answer
    document.getElementById('captchaTimestamp').value = Date.now();
    
    return answer;
  }
  
  // Implement a less restrictive rate limiting
  function checkRateLimit() {
    try {
      const now = Date.now();
      const rateLimitKey = 'form_submission_timestamps';
      let submissionTimes = [];
      
      try {
        submissionTimes = JSON.parse(localStorage.getItem(rateLimitKey) || '[]');
        if (!Array.isArray(submissionTimes)) {
          submissionTimes = [];
        }
      } catch (e) {
        console.warn('Could not parse stored timestamps, resetting', e);
        submissionTimes = [];
      }
      
      // Filter out attempts older than 10 minutes
      submissionTimes = submissionTimes.filter(time => now - time < 600000);
      
      // Check if there are too many recent submissions (10 per 10 minutes)
      if (submissionTimes.length >= 10) {
        return false;
      }
      
      // Add current attempt
      submissionTimes.push(now);
      localStorage.setItem(rateLimitKey, JSON.stringify(submissionTimes));
      return true;
    } catch (e) {
      // In case of any localStorage errors, allow the submission
      console.warn('Rate limit check failed:', e);
      return true;
    }
  }
  
  // Input validation and sanitization functions
  function sanitizeUrl(url) {
    if (!url) {
      throw new Error('URL is required');
    }
    
    // Trim whitespace
    let cleanUrl = url.trim();
    
    // Add protocol if missing
    if (!/^https?:\/\//i.test(cleanUrl)) {
      cleanUrl = 'https://' + cleanUrl;
    }
    
    try {
      // Create a URL object to validate the URL
      const urlObj = new URL(cleanUrl);
      
      // Only allow http and https protocols
      if (urlObj.protocol !== 'http:' && urlObj.protocol !== 'https:') {
        throw new Error('URL must use http or https protocol');
      }
      
      // Return the sanitized URL string
      return urlObj.toString();
    } catch (e) {
      // Provide a more specific error message
      if (e instanceof Error) {
        throw new Error(`Invalid URL: ${e.message}`);
      } else {
        throw new Error('Invalid URL format');
      }
    }
  }
  
  function sanitizeEmail(email) {
    if (!email) {
      throw new Error('Email is required');
    }
    
    email = email.trim();
    
    // Simple validation
    if (!email.includes('@') || !email.includes('.')) {
      throw new Error('Please enter a valid email address');
    }
    
    return email;
  }
  
  // Check if a page exists
  async function checkPageExists(url) {
    try {
      const response = await fetch(url, { 
        method: 'HEAD',
        mode: 'no-cors' // This fixes CORS issues with HEAD requests
      });
      return true; // With no-cors, we can't check response.ok, so assume success
    } catch (e) {
      console.warn('Error checking if page exists:', e);
      return false;
    }
  }
  
  // Set up the form
  const setupForm = () => {
    // Generate a CSRF token
    const csrfToken = generateToken();
    
    // Include the token in a hidden form field
    let tokenInput = document.getElementById('csrfToken');
    if (!tokenInput) {
      tokenInput = document.createElement('input');
      tokenInput.type = 'hidden';
      tokenInput.id = 'csrfToken';
      tokenInput.name = 'csrf_token';
      submitForm.appendChild(tokenInput);
    }
    tokenInput.value = csrfToken;
    
    // Add event listeners to clear error states on input
    const resourceLink = document.getElementById('resourceLink');
    const emailAddress = document.getElementById('emailAddress');

    if (resourceLink && emailAddress) {
      // Clear error state when focusing on fields
      resourceLink.addEventListener('focus', () => {
        resourceLink.classList.remove('error-field');
      });

      emailAddress.addEventListener('focus', () => {
        emailAddress.classList.remove('error-field');
      });

      // Clear error messages when typing
      resourceLink.addEventListener('input', () => {
        if (formStatus.textContent && formStatus.textContent.includes('URL')) {
          formStatus.textContent = '';
          formStatus.className = 'form-status';
        }
      });

      emailAddress.addEventListener('input', () => {
        if (formStatus.textContent && formStatus.textContent.includes('email')) {
          formStatus.textContent = '';
          formStatus.className = 'form-status';
        }
      });
    }
    
    // Generate a new CAPTCHA
    generateCaptcha();
  };

  // Close popup when close button is clicked
  if (closePopup) {
    closePopup.addEventListener('click', () => {
      submitPopup.classList.remove('active');
      document.body.style.overflow = '';
    });
  }

  // Close popup when clicking outside content area
  if (submitPopup) {
    submitPopup.addEventListener('click', (e) => {
      if (e.target === submitPopup) {
        submitPopup.classList.remove('active');
        document.body.style.overflow = '';
      }
    });
  }

  // Close popup with escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && submitPopup && submitPopup.classList.contains('active')) {
      submitPopup.classList.remove('active');
      document.body.style.overflow = '';
    }
  });

  // Handle form submission with improved error handling
  if (submitForm) {
    submitForm.addEventListener('submit', async (e) => {
      e.preventDefault(); // Prevent default form submission
      
      // Make sure the script URL is available
      if (!googleScriptUrl) {
        googleScriptUrl = FALLBACK_SCRIPT_URL;
        console.log('Using fallback Google Script URL during submission:', googleScriptUrl);
      }
      
      // Check rate limiting
      if (!checkRateLimit()) {
        formStatus.textContent = 'Too many submissions. Please try again later.';
        formStatus.className = 'form-status error';
        return;
      }
      
      // Security check: Check if honeypot field is filled (bot detection)
      if (honeypot && honeypot.value !== '') {
        // Don't show an error, just silently fail to avoid alerting bots
        console.log('Honeypot triggered - potential bot');
        formStatus.textContent = 'Submission received!';
        formStatus.className = 'form-status success';
        return;
      }
      
      // Verify the CAPTCHA only if it exists
      if (document.getElementById('captchaExpected') && document.getElementById('captchaTimestamp') && challenge) {
        // Security check: Verify challenge answer
        const providedAnswer = challenge.value.trim();
        const expectedAnswerBase64 = document.getElementById('captchaExpected').value;
        
        if (!expectedAnswerBase64) {
          console.warn('Missing expected CAPTCHA answer');
          formStatus.textContent = 'There was an error with the security check. Please try again.';
          formStatus.className = 'form-status error';
          generateCaptcha();
          return;
        }
        
        let expectedAnswer;
        try {
          expectedAnswer = atob(expectedAnswerBase64);
        } catch (e) {
          console.error('Error decoding captcha answer:', e);
          formStatus.textContent = 'There was an error with the security check. Please try again.';
          formStatus.className = 'form-status error';
          generateCaptcha();
          return;
        }
        
        const captchaTimestamp = parseInt(document.getElementById('captchaTimestamp').value);
        const now = Date.now();
        
        // Check if the CAPTCHA is expired (older than 30 minutes)
        if (now - captchaTimestamp > 1800000) {
          formStatus.textContent = 'Security challenge expired. Please try again.';
          formStatus.className = 'form-status error';
          generateCaptcha(); // Generate a new CAPTCHA
          return;
        }
        
        // Check if the answer is correct
        if (providedAnswer !== expectedAnswer) {
          formStatus.textContent = 'Incorrect answer to the challenge question. Please try again.';
          formStatus.className = 'form-status error';
          generateCaptcha(); // Generate a new CAPTCHA
          return;
        }
      }
      
      // Show loading state
      const submitBtn = submitForm.querySelector('.submit-btn');
      const originalBtnText = submitBtn.innerHTML;
      submitBtn.innerHTML = `
        <svg class="spinner" width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" stroke-opacity="0.25"/>
          <path d="M12 2C6.47715 2 2 6.47715 2 12C2 12 2 14 4 14C6 14 6 12 6 12C6 8.68629 8.68629 6 12 6C15.3137 6 18 8.68629 18 12C18 15.3137 15.3137 18 12 18C8.68629 18 6 15.3137 6 12C6 12 6 10 4 10C2 10 2 12 2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2Z" fill="currentColor"/>
        </svg>
        Submitting...
      `;
      submitBtn.disabled = true;
      formStatus.textContent = 'Sending your submission...';
      formStatus.className = 'form-status loading';
      
      try {
        // Get form data
        const resourceLinkElem = document.getElementById('resourceLink');
        const emailAddressElem = document.getElementById('emailAddress');
        
        if (!resourceLinkElem || !emailAddressElem) {
          throw new Error('Form fields not found');
        }
        
        const resourceLink = resourceLinkElem.value;
        const emailAddress = emailAddressElem.value;
        
        // Sanitize inputs
        let sanitizedUrl;
        let sanitizedEmail;
        
        try {
          sanitizedUrl = sanitizeUrl(resourceLink);
          resourceLinkElem.classList.remove('error-field');
        } catch (urlError) {
          resourceLinkElem.classList.add('error-field');
          resourceLinkElem.focus();
          throw urlError;
        }
        
        try {
          sanitizedEmail = sanitizeEmail(emailAddress);
          emailAddressElem.classList.remove('error-field');
        } catch (emailError) {
          emailAddressElem.classList.add('error-field');
          emailAddressElem.focus();
          throw emailError;
        }
        
        // Prepare data for Google Script
        const formData = {
          resourceLink: sanitizedUrl,
          emailAddress: sanitizedEmail,
          timestamp: new Date().toISOString(),
          token: document.getElementById('csrfToken').value,
          origin: window.location.origin
        };
        
        console.log("Form data prepared:", formData);
        
        // Simple submission approach
        const submitViaFormData = async () => {
          const formDataObj = new FormData();
          
          // Add all form fields
          for (const [key, value] of Object.entries(formData)) {
            formDataObj.append(key, value);
          }
          
          // This is a more reliable way to submit to Google Scripts
          const response = await fetch(googleScriptUrl, {
            method: 'POST',
            body: formDataObj,
            mode: 'no-cors' // This prevents CORS issues
          });
          
          // When using no-cors, we can't read the response
          // We'll assume success if no error is thrown
          return { success: true, message: 'Submission sent' };
        };
        
        // Execute the submission
        await submitViaFormData();
        
        // Show success message
        formStatus.textContent = '✅ Resource submitted successfully!';
        formStatus.className = 'form-status success';
        submitForm.reset();
        
        // Try to check if thank-you page exists and redirect
        const thankYouUrl = `${window.location.origin}/thank-you`;
        try {
          if (await checkPageExists(thankYouUrl)) {
            setTimeout(() => {
              window.location.href = thankYouUrl;
            }, 2000);
          }
        } catch (e) {
          console.warn("Error checking thank you page:", e);
        }
      } catch (error) {
        console.error('Submission error:', error);
        // Display the specific error message
        formStatus.textContent = `❌ ${error.message || 'There was an error with your submission. Please try again later.'}`;
        formStatus.className = 'form-status error';
        
        // Generate a new CAPTCHA after error
        generateCaptcha();
      } finally {
        // Reset button state
        submitBtn.innerHTML = originalBtnText;
        submitBtn.disabled = false;
      }
    });
  }
  
  // Initialize form when page loads
  setupForm();
  
  // Listen for events
  document.addEventListener('setupPopupForm', setupForm);
  document.addEventListener('generateCaptcha', generateCaptcha);
  
  // Log to help with debugging
  console.log('SubmitPopup script initialized successfully');
});

// Expose a function to open the popup
window.openSubmitPopup = function() {
  const submitPopup = document.getElementById('submitPopup');
  const submitForm = document.getElementById('submitForm');
  const formStatus = document.getElementById('formStatus');
  
  if (!submitPopup || !submitForm || !formStatus) {
    console.error('Required elements not found for popup');
    return;
  }
  
  // Set up the form again when opening
  document.dispatchEvent(new Event('setupPopupForm'));
  
  // Show the popup
  submitPopup.classList.add('active');
  document.body.style.overflow = 'hidden';
  
  // Reset form when opening popup
  submitForm.reset();
  formStatus.textContent = '';
  formStatus.className = 'form-status';
  
  // Generate a new CAPTCHA
  document.dispatchEvent(new Event('generateCaptcha'));
  
  console.log('Popup opened successfully');
}