---
// SubmitPopup.astro with enhanced styling and maintained security
---

<!-- Add at the top of the file after the "---" section -->
<meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; connect-src https://script.google.com;">

<div id="submitPopup" class="popup-overlay">
  <div class="popup-content">
    <div class="popup-header">
      <h2>Submit a resource</h2>
      <button id="closePopup" class="close-btn">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M6 18L18 6M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </div>
    <p class="popup-description">
      Submit a resource for other lazy people. If we like it too, we'll feature it on 4thelazy.com.
    </p>
    <form id="submitForm" class="popup-form">
      <div class="form-field">
        <label for="resourceLink">Resource URL</label>
        <input type="url" id="resourceLink" name="Resource Link" placeholder="https://example.com" required
               pattern="https?://.+" title="Please enter a valid URL starting with http:// or https://">
      </div>
      <div class="form-field">
        <label for="emailAddress">Your Email</label>
        <input type="email" id="emailAddress" name="Email Address" placeholder="you@example.com" required>
      </div>
      
      <!-- Honeypot field to catch bots -->
      <div class="form-field" style="display:none;">
        <input type="text" id="honeypot" name="honeypot" tabindex="-1" autocomplete="off">
      </div>
      
      <!-- CAPTCHA or challenge field -->
      <div class="form-field captcha-field">
        <label for="challenge">Security Check</label>
        <div class="captcha-container">
          <div id="captchaQuestion" class="captcha-question"></div>
          <input type="text" id="challenge" name="challenge" placeholder="Answer here" required>
          <input type="hidden" id="captchaTimestamp" name="captchaTimestamp">
          <input type="hidden" id="captchaExpected" name="captchaExpected">
          <input type="hidden" id="csrfToken" name="csrf_token">
        </div>
      </div>
      
      <div id="formStatus" class="form-status"></div>
      
      <button type="submit" class="submit-btn">
        Submit
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M16 8L21 12L16 16" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </form>
  </div>
</div>

<style>
  /* Base styles */
  :root {
    --color-primary: #206A5D;
    --color-primary-dark: #174d43;
    --color-primary-light: #e8f5f3;
    --color-secondary: #f7b32b;
    --color-white: #ffffff;
    --color-gray-100: #f8f9fa;
    --color-gray-200: #e9ecef;
    --color-gray-300: #dee2e6;
    --color-gray-400: #ced4da;
    --color-gray-500: #adb5bd;
    --color-gray-600: #6c757d;
    --color-gray-700: #495057;
    --color-gray-800: #343a40;
    --color-gray-900: #212529;
    --color-error: #dc3545;
    --color-success: #28a745;
    
    --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.05);
    --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);
    --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1);
    
    --radius-sm: 0.25rem;
    --radius-md: 0.5rem;
    --radius-lg: 0.75rem;
    
    --spacing-xs: 0.25rem;
    --spacing-sm: 0.5rem;
    --spacing-md: 1rem;
    --spacing-lg: 1.5rem;
    --spacing-xl: 2rem;
    
    --font-primary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  /* Popup overlay */
  .popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
    backdrop-filter: blur(4px);
    padding: 1rem;
    box-sizing: border-box;
  }

  .popup-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  /* Popup content container */
  .popup-content {
    background-color: var(--color-white);
    border-radius: var(--radius-lg);
    width: 100%;
    max-width: 480px;
    box-shadow: var(--shadow-lg);
    overflow: hidden;
    animation: popup-fade-in 0.3s ease forwards;
    position: relative;
  }

  @keyframes popup-fade-in {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Popup header styling */
  .popup-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-lg) var(--spacing-lg) var(--spacing-sm);
  }

  .popup-header h2 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--color-gray-900);
  }

  .popup-description {
    padding: 0 var(--spacing-lg);
    margin-top: 0;
    margin-bottom: var(--spacing-md);
    color: var(--color-gray-600);
    font-size: 0.95rem;
    line-height: 1.5;
  }

  /* Close button styling */
  .close-btn {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--color-gray-500);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--spacing-xs);
    border-radius: 50%;
    transition: all 0.2s ease;
  }

  .close-btn:hover {
    color: var(--color-gray-800);
    background-color: var(--color-gray-200);
  }

  /* Form styling */
  .popup-form {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
    padding: var(--spacing-md) var(--spacing-lg) var(--spacing-lg);
  }

  .form-field {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-xs);
  }

  .form-field label {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--color-gray-700);
  }

  .popup-form input[type="url"],
  .popup-form input[type="email"],
  .popup-form input[type="text"] {
    padding: 0.75rem var(--spacing-md);
    font-size: 1rem;
    border: 1px solid var(--color-gray-300);
    border-radius: var(--radius-md);
    background-color: var(--color-white);
    color: var(--color-gray-800);
    transition: all 0.2s ease;
    width: 100%;
  }

  .popup-form input:focus {
    border-color: var(--color-primary);
    outline: none;
    box-shadow: 0 0 0 3px rgba(32, 106, 93, 0.15);
  }

  .popup-form input::placeholder {
    color: var(--color-gray-500);
  }

  

  /* Submit button styling */
  .submit-btn {
    background-color: var(--color-primary);
    color: var(--color-white);
    border: none;
    padding: 0.75rem var(--spacing-lg);
    font-weight: 600;
    font-size: 1rem;
    border-radius: var(--radius-md);
    cursor: pointer;
    transition: all 0.2s ease;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-xs);
    margin-top: var(--spacing-sm);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .submit-btn:hover {
    background-color: var(--color-primary-dark);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }

  .submit-btn:active {
    transform: translateY(0);
    box-shadow: var(--shadow-sm);
  }

  .submit-btn:disabled {
    background-color: var(--color-gray-400);
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  /* CAPTCHA field styling */
  .captcha-container {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
  }

  .captcha-question {
    font-weight: 600;
    color: var(--color-primary);
    padding: var(--spacing-sm) 0;
  }
  
  .captcha-field {
    background-color: var(--color-primary-light);
    padding: var(--spacing-md);
    border-radius: var(--radius-md);
    border: 1px solid rgba(32, 106, 93, 0.2);
  }

  .captcha-field label {
    margin-bottom: var(--spacing-xs);
  }

  /* Form status message styling */
  .form-status {
    font-size: 0.9rem;
    padding: var(--spacing-xs) 0;
    min-height: 1.5rem;
    color: var(--color-primary);
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .form-status.error {
    color: var(--color-error);
  }

  .form-status.success {
    color: var(--color-success);
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    .popup-content {
      max-width: 100%;
      border-radius: var(--radius-md);
    }

    .popup-header h2 {
      font-size: 1.25rem;
    }

    .popup-form {
      padding: var(--spacing-md);
    }
    
    .popup-overlay {
      padding: 0.5rem;
    }
  }
</style>

<script is:inline>
document.addEventListener('DOMContentLoaded', () => {
  const closePopup = document.getElementById('closePopup');
  const submitPopup = document.getElementById('submitPopup');
  const submitForm = document.getElementById('submitForm');
  const formStatus = document.getElementById('formStatus');
  const honeypot = document.getElementById('honeypot');
  const challenge = document.getElementById('challenge');
  
  // Configuration variables
  let googleScriptUrl = '';
  
  // Try to load configuration
  fetch('/config.json')
    .then(response => response.json())
    .then(config => {
      googleScriptUrl = config.googleScriptUrl;
    })
    .catch(error => {
      console.error('Failed to load configuration:', error);
      // Fallback to a default URL if needed
      googleScriptUrl = 'YOUR_GOOGLE_SCRIPT_URL'; // Replace this with a default URL
    });
  
  // Ensure the page is served over HTTPS
  if (window.location.protocol !== 'https:' && window.location.hostname !== 'localhost') {
    window.location.href = window.location.href.replace('http:', 'https:');
    return;
  }
  
  // Generate a secure token with high entropy
  const generateToken = () => {
    const array = new Uint8Array(32);
    window.crypto.getRandomValues(array);
    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');
  };
  
  // Generate a more complex CAPTCHA
  function generateCaptcha() {
    const operations = [
      { op: '+', fn: (a, b) => a + b },
      { op: '-', fn: (a, b) => a - b },
      { op: '*', fn: (a, b) => a * b }
    ];
    
    const op = operations[Math.floor(Math.random() * operations.length)];
    const a = Math.floor(Math.random() * 10) + 1;
    const b = Math.floor(Math.random() * 10) + 1;
    
    const question = `What is ${a} ${op.op} ${b}?`;
    const answer = op.fn(a, b).toString();
    
    document.getElementById('captchaQuestion').textContent = question;
    document.getElementById('captchaExpected').value = btoa(answer); // Base64 encode the answer
    document.getElementById('captchaTimestamp').value = Date.now();
    
    return answer;
  }
  
  // Implement rate limiting with localStorage
  function checkRateLimit() {
    const now = Date.now();
    const rateLimitKey = 'form_submission_timestamps';
    let submissionTimes = JSON.parse(localStorage.getItem(rateLimitKey) || '[]');
    
    // Filter out attempts older than 1 hour
    submissionTimes = submissionTimes.filter(time => now - time < 3600000);
    
    // Check if there are too many recent submissions (5 per hour)
    if (submissionTimes.length >= 5) {
      return false;
    }
    
    // Add current attempt
    submissionTimes.push(now);
    localStorage.setItem(rateLimitKey, JSON.stringify(submissionTimes));
    return true;
  }
  
  // Input validation and sanitization functions
  function sanitizeUrl(url) {
    // Basic sanitization
    url = url.trim();
    
    // Only allow http:// and https:// protocols
    if (!/^https?:\/\//i.test(url)) {
      throw new Error('URL must start with http:// or https://');
    }
    
    try {
      const urlObj = new URL(url);
      // Restrict to web URLs (no javascript: or data: URLs)
      if (!['http:', 'https:'].includes(urlObj.protocol)) {
        throw new Error('Invalid URL protocol');
      }
      return urlObj.toString();
    } catch (e) {
      throw new Error('Please enter a valid URL');
    }
  }
  
  function sanitizeEmail(email) {
    email = email.trim();
    
    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      throw new Error('Please enter a valid email address');
    }
    
    // Check length constraints
    if (email.length > 254) {
      throw new Error('Email address is too long');
    }
    
    return email;
  }
  
  // Check if a page exists
  async function checkPageExists(url) {
    try {
      const response = await fetch(url, { method: 'HEAD' });
      return response.ok;
    } catch (e) {
      return false;
    }
  }
  
  // Generate CSRF token and set up the form
  const setupForm = () => {
    // Generate a CSRF token
    const csrfToken = generateToken();
    
    // Set as a cookie (ideally, this would be HttpOnly but that requires server-side)
    document.cookie = `csrf_token=${csrfToken}; SameSite=Strict; Secure; Path=/`;
    
    // Include the token in a hidden form field
    let tokenInput = document.getElementById('csrfToken');
    if (!tokenInput) {
      tokenInput = document.createElement('input');
      tokenInput.type = 'hidden';
      tokenInput.id = 'csrfToken';
      tokenInput.name = 'csrf_token';
      submitForm.appendChild(tokenInput);
    }
    tokenInput.value = csrfToken;
    
    // Generate a new CAPTCHA
    generateCaptcha();
  };

  // Close popup when close button is clicked
  closePopup.addEventListener('click', () => {
    submitPopup.classList.remove('active');
    document.body.style.overflow = '';
  });

  // Close popup when clicking outside content area
  submitPopup.addEventListener('click', (e) => {
    if (e.target === submitPopup) {
      submitPopup.classList.remove('active');
      document.body.style.overflow = '';
    }
  });

  // Close popup with escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && submitPopup.classList.contains('active')) {
      submitPopup.classList.remove('active');
      document.body.style.overflow = '';
    }
  });

  // Handle form submission
  submitForm.addEventListener('submit', async (e) => {
    e.preventDefault(); // Prevent default form submission
    
    // Check rate limiting
    if (!checkRateLimit()) {
      formStatus.textContent = 'Rate limit exceeded. Please try again later.';
      formStatus.className = 'form-status error';
      return;
    }
    
    // Security check: Check if honeypot field is filled (bot detection)
    if (honeypot.value !== '') {
      // Don't show an error, just silently fail to avoid alerting bots
      console.log('Honeypot triggered - potential bot');
      // Display fake success to confuse bots
      formStatus.textContent = 'Submission received!';
      formStatus.className = 'form-status success';
      return;
    }
    
    // Security check: Verify challenge answer
    const providedAnswer = challenge.value.trim();
    const expectedAnswer = atob(document.getElementById('captchaExpected').value);
    const captchaTimestamp = parseInt(document.getElementById('captchaTimestamp').value);
    const now = Date.now();
    
    // Check if the CAPTCHA is expired (older than 10 minutes)
    if (now - captchaTimestamp > 600000) {
      formStatus.textContent = 'Security challenge expired. Please try again.';
      formStatus.className = 'form-status error';
      generateCaptcha(); // Generate a new CAPTCHA
      return;
    }
    
    // Check if the answer is correct
    if (providedAnswer !== expectedAnswer) {
      formStatus.textContent = 'Incorrect answer to the challenge question. Please try again.';
      formStatus.className = 'form-status error';
      generateCaptcha(); // Generate a new CAPTCHA
      return;
    }
    
    // Show loading state
    const submitBtn = submitForm.querySelector('.submit-btn');
    const originalBtnText = submitBtn.innerHTML;
    submitBtn.innerHTML = `
      <svg class="spinner" width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" stroke-opacity="0.25"/>
        <path d="M12 2C6.47715 2 2 6.47715 2 12C2 12 2 14 4 14C6 14 6 12 6 12C6 8.68629 8.68629 6 12 6C15.3137 6 18 8.68629 18 12C18 15.3137 15.3137 18 12 18C8.68629 18 6 15.3137 6 12C6 12 6 10 4 10C2 10 2 12 2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2Z" fill="currentColor">
          <animateTransform 
            attributeName="transform" 
            type="rotate"
            from="0 12 12"
            to="360 12 12"
            dur="1s"
            repeatCount="indefinite"/>
        </path>
      </svg>
      Submitting...
    `;
    submitBtn.disabled = true;
    formStatus.textContent = 'Sending your submission...';
    formStatus.className = 'form-status';
    
    try {
      // Get form data
      const resourceLink = document.getElementById('resourceLink').value;
      const emailAddress = document.getElementById('emailAddress').value;
      
      // Sanitize inputs
      const sanitizedUrl = sanitizeUrl(resourceLink);
      const sanitizedEmail = sanitizeEmail(emailAddress);
      
      // Check if Google Script URL is available
      if (!googleScriptUrl) {
        throw new Error('Form configuration is not ready. Please try again later.');
      }
      
      // Prepare data for Google Script
      const formData = {
        resourceLink: sanitizedUrl,
        emailAddress: sanitizedEmail,
        timestamp: new Date().toISOString(),
        token: document.getElementById('csrfToken').value,
        origin: window.location.origin,
        captchaTimestamp: document.getElementById('captchaTimestamp').value,
        captchaResponse: providedAnswer,
        captchaExpected: document.getElementById('captchaExpected').value
      };
      
      // Add some delay to prevent rapid submissions
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      try {
        // First try with proper CORS
        const response = await fetch(googleScriptUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formData),
          credentials: 'include' // Send cookies
        });
        
        if (response.ok) {
          // Successfully received a response
          formStatus.textContent = '✅ Resource submitted successfully!';
          formStatus.className = 'form-status success';
          submitForm.reset();
          
          // Check if thank-you page exists and redirect
          const thankYouUrl = `${window.location.origin}/thank-you`;
          if (await checkPageExists(thankYouUrl)) {
            setTimeout(() => {
              window.location.href = thankYouUrl;
            }, 2000);
          }
        } else {
          throw new Error(`Server responded with status: ${response.status}`);
        }
      } catch (fetchError) {
        // If CORS error, fallback to no-cors mode with form submission
        if (fetchError.message.includes('CORS') || fetchError.name === 'TypeError') {
          console.log('Falling back to form submission due to CORS issue');
          
          // Create a hidden form for submission
          const backupForm = document.createElement('form');
          backupForm.method = 'POST';
          backupForm.action = googleScriptUrl;
          backupForm.style.display = 'none';
          
          // Add all form data as hidden inputs
          Object.entries(formData).forEach(([key, value]) => {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = key;
            input.value = typeof value === 'string' ? value : JSON.stringify(value);
            backupForm.appendChild(input);
          });
          
          // Submit the form
          document.body.appendChild(backupForm);
          backupForm.submit();
          
          // Clean up
          setTimeout(() => {
            document.body.removeChild(backupForm);
          }, 1000);
          
          formStatus.textContent = '✅ Resource submitted successfully!';
          formStatus.className = 'form-status success';
          submitForm.reset();
          
          // Check if thank-you page exists and redirect
          const thankYouUrl = `${window.location.origin}/thank-you`;
          if (await checkPageExists(thankYouUrl)) {
            setTimeout(() => {
              window.location.href = thankYouUrl;
            }, 2000);
          }
        } else {
          throw fetchError; // Re-throw for the outer catch block
        }
      }
      
    } catch (error) {
      console.error('Submission error:', error);
      // Generic error message that doesn't leak details
      formStatus.textContent = `❌ ${error.message || 'There was an error with your submission. Please try again later.'}`;
      formStatus.className = 'form-status error';
      
      // Generate a new CAPTCHA after error
      generateCaptcha();
    } finally {
      // Reset button state
      submitBtn.innerHTML = originalBtnText;
      submitBtn.disabled = false;
    }
  });
  
  // Initialize form when page loads
  setupForm();
});

// Expose a function to open the popup that can be called from other components
window.openSubmitPopup = function() {
  const submitPopup = document.getElementById('submitPopup');
  const submitForm = document.getElementById('submitForm');
  const formStatus = document.getElementById('formStatus');
  
  // Set up the form again when opening (refresh CSRF token and CAPTCHA)
  document.dispatchEvent(new Event('setupPopupForm'));
  
  // Show the popup
  submitPopup.classList.add('active');
  document.body.style.overflow = 'hidden';
  
  // Reset form when opening popup
  submitForm.reset();
  formStatus.textContent = '';
  formStatus.className = 'form-status';
  
  // Generate a new CAPTCHA
  const captchaQuestion = document.getElementById('captchaQuestion');
  if (captchaQuestion) {
    // Use the function from the main scope
    const event = new CustomEvent('generateCaptcha');
    document.dispatchEvent(event);
  }
};
</script>